; OM File Header - Saved 2018/11/13 0:24:11
; (6.1401 :patc (om-make-point 226 460) (om-make-point 365 23) (om-make-point 656 580) "" 183 0 "2018/11/09 12:47:36" "2018/11/13 0:24:11")
; End File Header
; External resources 
; (list (list (quote :text) "#P\"../../../../SRC/ML-AI/omai/omai/resources/data/classes.txt\"" "#P\"../../../../SRC/ML-AI/omai/omai/resources/data/words.txt\"" "#P\"../../../../SRC/ML-AI/omai/omai/resources/data/text.txt\""))
(in-package :om)(load-lib-for (quote ("omai")))(setf *om-current-persistent* (om-load-patch1 "text-analysis" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 535 364) (om-make-point 65 30) "sheriff" "\"sheriff\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-WORD-CLASS" (quote omai::get-word-class) (quote ((om-load-inputfun (quote input-funbox) "" "TA" nil) (om-load-inputfun (quote input-funbox) "" "WORD" nil))) (om-make-point 479 394) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 362 390) (om-make-point 74 30) "america" "\"america\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 295 390) (om-make-point 61 30) "africa" "\"africa\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-SIMILARTY" (quote omai::get-similarty) (quote ((om-load-inputfun (quote input-funbox) "" "TA" nil) (om-load-inputfun (quote input-funbox) "" "WORD1" nil) (om-load-inputfun (quote input-funbox) "" "WORD2" nil))) (om-make-point 270 442) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 133 362) (om-make-point 61 30) "africa" "\"africa\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WORD-FEATURES" (quote omai::word-features) (quote ((om-load-inputfun (quote input-funbox) "" "TA" nil) (om-load-inputfun (quote input-funbox) "" "WORD" nil) (om-load-inputfun (quote input-funbox) "" "N" 10))) (om-make-point 119 442) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 408 139) (om-make-point 81 135) (load-textfile (om-make-pathname :directory (quote (:absolute "Users" "bresson" "SRC" "ML-AI" "omai" "omai" "resources" "data")) :device nil :host nil :name "classes" :type "txt") (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FILE-CHOOSER" (quote file-chooser) (quote nil) (om-make-point 441 50) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "text" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 269 164) (om-make-point 70 104) (load-textfile (om-make-pathname :directory (quote (:absolute "Users" "bresson" "SRC" "ML-AI" "omai" "omai" "resources" "data")) :device nil :host nil :name "words" :type "txt") (quote textfile) "supersede" "text") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FILE-CHOOSER" (quote file-chooser) (quote nil) (om-make-point 249 88) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 93 275) (om-make-point 70 50) (load-textfile (om-make-pathname :directory (quote (:absolute "Users" "bresson" "SRC" "ML-AI" "omai" "omai" "resources" "data")) :device nil :host nil :name "text" :type "txt") (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FILE-CHOOSER" (quote file-chooser) (quote nil) (om-make-point 164 186) nil (list (om-make-pathname :directory (quote (:absolute "Users" "bresson" "SRC" "ML-AI" "omai" "omai" "resources" "data")) :device :unspecific :host :unspecific :name "text" :type "txt")) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "vector-space" (quote omai::vector-space) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "corpus" nil) (om-load-inputfun (quote input-funbox) "" "words" nil) (om-load-inputfun (quote input-funbox) "" "classes" nil))) (om-make-point 205 299) (om-make-point 152 72) (if (find-class (quote omai::vector-space) nil) (make-instance (quote omai::vector-space) :corpus (om-make-pathname :directory (quote (:absolute "Users" "bresson" "SRC" "ML-AI" "omai" "omai" "resources" "data")) :device :unspecific :host :unspecific :name "text" :type "txt") :words (list "potato " "food " "bread " "fish " "eggs " "grains " "milk " "meat " "wine " "beer " "water " "vegetables " "toast " "salt " "tea " "coffee " "sauce " "rice " "mustard " "peas " "breakfast" "supper" "lunch" "administration  " "institute    " "college" "government      " "school          " "center       " "corporation     " "faculty            " "company         " "office          " "organization    " "association     " "embassy" "producer " "professor " "dr " "mr " "president " "governor     " "doctor " "master " "attorney " "lord " "king " "chairman " "director " "secretary " "emperor " "ambassador " "congressman " "assistant" "consultant" "italy " "dallas " "france " "america " "england " "germany " "washington  " "tennessee " "china " "japan " "russia " "pennsylvania " "francisco " "mississippi " "philadelphia  " "georgia " "boston " "illinois " "africa " "congo " "laos " "london " "austin " "vienna " "carolina " "michigan " "arkansas" "europe" "lizzie  " "david " "bill " "howard " "john " "johnny " "roy " "joe " "thompson " "harris " "jones " "jane " "beethoven " "lucy " "mickey " "harvey " "jean " "nixon " "paul " "kennedy " "james" "philip" "edward" "fruit" "california" "peter " "egypt" "department" "hiroshima" "robert" "butter " "pepper" "asia" "roosevelt" "moscow" "senator" "university" "minister" "sheriff") :classes (list (list (quote :foodstuff) (list (quote potato) (quote food) (quote bread) (quote fish) (quote eggs) (quote grains) (quote milk) (quote meat) (quote wine) (quote beer) (quote water) (quote vegetables) (quote toast) (quote salt) (quote tea) (quote coffee) (quote sauce) (quote rice) (quote mustard) (quote peas) (quote breakfast) (quote supper) (quote lunch))) (list (quote :institution) (list (quote administration) (quote institute) (quote college) (quote government) (quote school) (quote center) (quote corporation) (quote faculty) (quote company) (quote office) (quote organization) (quote association) (quote embassy))) (list (quote :title) (list (quote producer) (quote professor) (quote dr) (quote president) (quote governor) (quote doctor) (quote master) (quote attorney) (quote lord) (quote mr) (quote king) (quote chairman) (quote director) (quote secretary) (quote emperor) (quote ambassador) (quote congressman) (quote assistant) (quote consultant) (quote minister))) (list (quote :place_name) (list (quote italy) (quote dallas) (quote france) (quote america) (quote england) (quote germany) (quote washington) (quote tennessee) (quote china) (quote japan) (quote russia) (quote pennsylvania) (quote francisco) (quote mississippi) (quote philadelphia) (quote georgia) (quote boston) (quote illinois) (quote africa) (quote congo) (quote laos) (quote london) (quote austin) (quote vienna) (quote carolina) (quote michigan) (quote arkansas) (quote europe))) (list (quote :person_name) (list (quote lizzie) (quote david) (quote bill) (quote howard) (quote john) (quote johnny) (quote roy) (quote joe) (quote thompson) (quote harris) (quote jones) (quote jane) (quote beethoven) (quote lucy) (quote mickey) (quote harvey) (quote jean) (quote nixon) (quote paul) (quote kennedy) (quote james) (quote philip) (quote edward)))) :from-file t)) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((13 0 1 0 nil 0) (0 0 1 1 nil 0) (13 0 4 0 nil 0) (3 0 4 1 nil 0) (2 0 4 2 nil 0) (13 0 6 0 nil 0) (5 0 6 1 nil 0) (8 0 7 0 nil 0) (10 0 9 0 nil 0) (12 0 11 0 nil 0) (12 0 13 1 nil 0) (9 1 13 2 nil 0) (7 1 13 3 nil 0))) nil 6.1401))