; OM File Header - Saved 2018/11/27 17:29:56
; (6.140003 :patc (om-make-point 496 60) (om-make-point 0 0) (om-make-point 861 656) "" 183 0 "2018/11/24 13:01:52" "2018/11/27 17:29:36")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "chord-seq split into clusters" (quote ((let ((box (om-load-boxcall (quote abstraction) "clusters-to-chordseq" (om-load-lisp-abspatch "clusters-to-chordseq" 6.140003 ";;;===================================================$;;;$;;; OMAI - AI tools for OM$;;;$;;;===================================================$;$;   This program is free software. For information on usage $;   and redistribution, see the \"LICENSE\" file in this distribution.$;$;   This program is distributed in the hope that it will be useful,$;   but WITHOUT ANY WARRANTY; without even the implied warranty of$;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. $;$;=====================================================$; Authors: Anders Vinjar, Jean Bresson - 2018$;=====================================================$$(lambda (vector-space)$  (labels ((my-make-new-chord-seq (mcs durs vels)$	     (let ((cs (mki 'chord-seq$			    :lmidic mcs$			    :ldur durs$			    :lvel vels)))$	       cs))$	   (class-to-chord-seq (classes)$	     (loop$		for class in classes$		collect (gethash 'lmidic class) into lmidic$		collect (gethash 'ldur class) into ldur$		collect (gethash 'lvel class) into lvel$		finally (return (my-make-new-chord-seq lmidic ldur lvel))))$	   (elms-to-chord-seqs (elms)$	     (mapcar #'(lambda (elm) (class-to-chord-seq elm)) elms))$	   (class-member-elms (vs)$	     (let ((class-members (mapcar #'(lambda (class) (omai::vs-class-members class))$					  (omai::classes vs)))$		   (vectors (omai::vectors vs)))$	       (loop$		  for members in class-members$		  collect (mapcar #'(lambda (member) (omai::get-feature-vector vectors member))$				  members)))))$    (let ((chord-seqs (elms-to-chord-seqs$		       (class-member-elms vector-space))))$      ;; onsets stored as names/classes of feature-vector inside #'cs-to-vs, mend them back in...$      (sort (loop$	       for class in (omai::classes vector-space)$	       for cs in chord-seqs$	       do (setf (lonset cs) (omai::vs-class-members class))$	       collect cs)$	    #'(lambda (a b) (> (omai::mean-pitch a) (omai::mean-pitch b)))))))") (quote ((om-load-inputfun (quote input-funbox) "" "VECTOR-SPACE" nil))) (om-make-point 428 69) nil (list (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8400) (8400) (8200) (8300) (8300) (8400) (8400) (8300))) :lonset (quote (7400 8400 2000 3900 1500 800 5800 7100 8461)) :ldur (quote ((110) (61) (27) (38) (103) (112) (31) (94))) :lvel (quote ((348) (400) (407) (410) (255) (414) (415) (283))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8100) (8100) (8400) (8400) (8100) (8100) (8100) (8400) (8100) (8200) (8300) (8000))) :lonset (quote (4700 5000 3300 9300 7900 6200 4500 9200 9500 400 6100 5400 9555)) :ldur (quote ((77) (41) (104) (74) (90) (22) (22) (88) (55) (55) (113) (90))) :lvel (quote ((205) (71) (99) (152) (52) (323) (250) (73) (267) (244) (66) (46))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7800) (7900) (7900) (8000) (7700) (7700) (7800) (7800) (8000) (7700) (7700) (8000) (7800) (7800) (7800) (7700) (7800))) :lonset (quote (9400 6700 300 4000 8700 600 8000 500 5200 3800 4800 2100 3100 7800 9800 3400 6400 9874)) :ldur (quote ((91) (84) (45) (49) (123) (29) (83) (62) (39) (11) (52) (87) (123) (124) (74) (117) (29))) :lvel (quote ((88) (195) (353) (306) (37) (350) (417) (124) (411) (429) (120) (437) (405) (475) (397) (23) (369))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (7100) (7500) (7300) (7100) (7400) (7000) (7500) (6900) (7100) (7000) (7500) (7300) (7500) (7400) (7100) (7000) (7500) (6900) (7000) (6900) (7200) (7400) (7100) (7400) (7300) (6900) (7400))) :lonset (quote (3700 5700 1300 9700 2300 4300 7300 3600 8300 900 4600 1900 7600 8600 1200 9600 3200 2500 7200 8200 5500 6500 7500 1100 8500 4100 2400 9100 9805)) :ldur (quote ((24) (110) (126) (105) (84) (47) (43) (114) (119) (18) (112) (54) (55) (37) (114) (124) (32) (20) (82) (22) (60) (79) (116) (116) (93) (101) (74) (23))) :lvel (quote ((132) (366) (145) (423) (70) (85) (216) (487) (396) (445) (321) (155) (386) (379) (473) (155) (139) (86) (232) (10) (394) (52) (417) (43) (227) (466) (21) (403))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6200) (6600) (6100) (6500) (6400) (6200) (6600) (6600) (6800) (6700) (6600) (6700) (6500) (6200) (6800) (6800) (6700) (6700) (6800) (6100) (6400) (6800) (6200) (6100) (6400) (6000) (6300) (6400) (6800) (6300) (6400) (6300) (6700) (6700) (6500))) :lonset (quote (0 1000 3000 7700 6000 7000 1600 5300 9000 2600 6300 5600 2900 6600 200 4900 2200 5900 6900 4200 8900 9900 3500 1800 2800 100 6800 8800 1400 5100 4400 8100 700 1700 2700 9967)) :ldur (quote ((19) (56) (76) (122) (119) (88) (21) (51) (28) (101) (15) (122) (10) (109) (28) (126) (14) (124) (87) (91) (85) (67) (104) (126) (26) (38) (127) (68) (39) (93) (86) (53) (36) (94) (74))) :lvel (quote ((142) (334) (274) (176) (51) (243) (469) (253) (181) (61) (250) (467) (355) (127) (308) (477) (73) (180) (75) (440) (228) (135) (111) (256) (331) (265) (281) (65) (41) (442) (481) (287) (68) (103) (373))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) nil "clusters-to-chordseq"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VECTOR-SPACE 2" (quote omai::vector-space) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "hash-table containing vs-vectors" "vectors" nil) (om-load-inputfun (quote input-funbox) "a list of features used for display and clustering" "features" nil) (om-load-inputfun (quote input-funbox) "hash-table containing classes number of clustering" "classes" nil))) (om-make-point 127 534) (om-make-point 70 50) (if (find-class (quote omai::vector-space) nil) (make-instance (quote omai::vector-space) :vectors (let ((hashtable (make-hash-table))) (loop for key in (list 0 7500 3100 6200 1800 9300 4900 500 8000 3600 6700 2300 9800 5400 1000 8500 4100 7200 2800 5900 1500 9000 4600 200 7700 3300 6400 2000 9500 5100 700 8200 3800 6900 2500 5600 1200 8700 4300 7400 3000 6100 1700 9200 4800 400 7900 3500 6600 2200 9700 5300 900 8400 4000 7100 2700 5800 1400 8900 4500 100 7600 3200 6300 1900 9400 5000 600 8100 3700 6800 2400 9900 5500 1100 8600 4200 7300 2900 6000 1600 9100 4700 300 7800 3400 6500 2100 9600 5200 800 8300 3900 7000 2600 5700 1300 8800 4400) for val in (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) do (sethash hashtable key val)) hashtable) :features (let ((hashtable (make-hash-table))) (loop for key in (list 0 7500 3100 6200 1800 9300 4900 500 8000 3600 6700 2300 9800 5400 1000 8500 4100 7200 2800 5900 1500 9000 4600 200 7700 3300 6400 2000 9500 5100 700 8200 3800 6900 2500 5600 1200 8700 4300 7400 3000 6100 1700 9200 4800 400 7900 3500 6600 2200 9700 5300 900 8400 4000 7100 2700 5800 1400 8900 4500 100 7600 3200 6300 1900 9400 5000 600 8100 3700 6800 2400 9900 5500 1100 8600 4200 7300 2900 6000 1600 9100 4700 300 7800 3400 6500 2100 9600 5200 800 8300 3900 7000 2600 5700 1300 8800 4400) for val in (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) do (sethash hashtable key val)) hashtable) :classes (list nil nil nil nil nil) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "K-MEANS" (quote omai::k-means) (quote ((om-load-inputfun (quote input-funbox) "VECTORS" "VECTORS" (quote vs)) (om-load-inputfun (quote input-funbox) "K" "K" 5))) (om-make-point 170 489) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "cs-to-vs" (om-load-patch-abs1 "cs-to-vs" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 101 28) (quote "input chord-seq") "" (om-make-point 242 130) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 150 42) (quote "create and return feature$vectors from input") "" (om-make-point 260 582) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 96 343) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote a)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote b)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote c)))) (om-make-point 55 284) (om-make-point 141 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 3" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 73 213) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 120 214) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 160 214) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAKE-FEATURE-VECTORS" (quote omai::make-feature-vectors) (quote ((om-load-inputfun (quote input-funbox) "MATRIX" "MATRIX" nil) (om-load-inputfun (quote input-funbox) "FEATURES" "FEATURES" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 64 520) (om-make-point 298 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 161 453) (om-make-point 95 30) (list (quote lmidic) (quote lvel) (quote ldur)) "(lmidic lvel ldur)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "IDENTITY" (quote identity) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 293 246) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 188 56) (quote "using lonset as input to 'names',$to carry onset times of events$through clustering") "" (om-make-point 219 295) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 49 28) (quote "matrix") "" (om-make-point 153 345) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 121 594) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote slot) "slots" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 60 122) (om-make-point 153 59) nil nil nil 8))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 2 0 nil 0) (4 0 3 0 nil 0) (5 0 3 1 nil 0) (6 0 3 2 nil 0) (14 1 4 0 nil 0) (14 3 5 0 nil 0) (14 4 6 0 nil 0) (2 0 7 0 nil 0) (8 0 7 1 nil 0) (9 0 7 2 nil 0) (14 2 9 0 nil 0) (7 0 13 0 nil 0) (12 0 14 0 nil 0))) 6.140003 nil "" (om-make-point 0 0) (om-make-point 649 672)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 37 194) nil (list (list (list 0 nil) (list 100 nil) (list 200 nil) (list 300 nil) (list 400 nil) (list 500 nil) (list 600 nil) (list 700 nil) (list 800 nil) (list 900 nil) (list 1000 nil) (list 1100 nil) (list 1200 nil) (list 1300 nil) (list 1400 nil) (list 1500 nil) (list 1600 nil) (list 1700 nil) (list 1800 nil) (list 1900 nil) (list 2000 nil) (list 2100 nil) (list 2200 nil) (list 2300 nil) (list 2400 nil) (list 2500 nil) (list 2600 nil) (list 2700 nil) (list 2800 nil) (list 2900 nil) (list 3000 nil) (list 3100 nil) (list 3200 nil) (list 3300 nil) (list 3400 nil) (list 3500 nil) (list 3600 nil) (list 3700 nil) (list 3800 nil) (list 3900 nil) (list 4000 nil) (list 4100 nil) (list 4200 nil) (list 4300 nil) (list 4400 nil) (list 4500 nil) (list 4600 nil) (list 4700 nil) (list 4800 nil) (list 4900 nil) (list 5000 nil) (list 5100 nil) (list 5200 nil) (list 5300 nil) (list 5400 nil) (list 5500 nil) (list 5600 nil) (list 5700 nil) (list 5800 nil) (list 5900 nil) (list 6000 nil) (list 6100 nil) (list 6200 nil) (list 6300 nil) (list 6400 nil) (list 6500 nil) (list 6600 nil) (list 6700 nil) (list 6800 nil) (list 6900 nil) (list 7000 nil) (list 7100 nil) (list 7200 nil) (list 7300 nil) (list 7400 nil) (list 7500 nil) (list 7600 nil) (list 7700 nil) (list 7800 nil) (list 7900 nil) (list 8000 nil) (list 8100 nil) (list 8200 nil) (list 8300 nil) (list 8400 nil) (list 8500 nil) (list 8600 nil) (list 8700 nil) (list 8800 nil) (list 8900 nil) (list 9000 nil) (list 9100 nil) (list 9200 nil) (list 9300 nil) (list 9400 nil) (list 9500 nil) (list 9600 nil) (list 9700 nil) (list 9800 nil) (list 9900 nil))) nil "cs-to-vs"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 159 56) (quote "try changing the second$input, to check different$sizes/resolution in clusters") "" (om-make-point 206 370) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 141 56) (quote "add our feature vectors$to our vector space,$asking for 'k' clusters") "" (om-make-point 46 306) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 415 192) (om-make-point 368 288) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8400) (8400) (8200) (8300) (8300) (8400) (8400) (8300))) :lonset (quote (7400 8400 2000 3900 1500 800 5800 7100 8461)) :ldur (quote ((110) (61) (27) (38) (103) (112) (31) (94))) :lvel (quote ((348) (400) (407) (410) (255) (414) (415) (283))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8100) (8100) (8400) (8400) (8100) (8100) (8100) (8400) (8100) (8200) (8300) (8000))) :lonset (quote (4700 5000 3300 9300 7900 6200 4500 9200 9500 400 6100 5400 9555)) :ldur (quote ((77) (41) (104) (74) (90) (22) (22) (88) (55) (55) (113) (90))) :lvel (quote ((205) (71) (99) (152) (52) (323) (250) (73) (267) (244) (66) (46))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7800) (7900) (7900) (8000) (7700) (7700) (7800) (7800) (8000) (7700) (7700) (8000) (7800) (7800) (7800) (7700) (7800))) :lonset (quote (9400 6700 300 4000 8700 600 8000 500 5200 3800 4800 2100 3100 7800 9800 3400 6400 9874)) :ldur (quote ((91) (84) (45) (49) (123) (29) (83) (62) (39) (11) (52) (87) (123) (124) (74) (117) (29))) :lvel (quote ((88) (195) (353) (306) (37) (350) (417) (124) (411) (429) (120) (437) (405) (475) (397) (23) (369))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (7100) (7500) (7300) (7100) (7400) (7000) (7500) (6900) (7100) (7000) (7500) (7300) (7500) (7400) (7100) (7000) (7500) (6900) (7000) (6900) (7200) (7400) (7100) (7400) (7300) (6900) (7400))) :lonset (quote (3700 5700 1300 9700 2300 4300 7300 3600 8300 900 4600 1900 7600 8600 1200 9600 3200 2500 7200 8200 5500 6500 7500 1100 8500 4100 2400 9100 9805)) :ldur (quote ((24) (110) (126) (105) (84) (47) (43) (114) (119) (18) (112) (54) (55) (37) (114) (124) (32) (20) (82) (22) (60) (79) (116) (116) (93) (101) (74) (23))) :lvel (quote ((132) (366) (145) (423) (70) (85) (216) (487) (396) (445) (321) (155) (386) (379) (473) (155) (139) (86) (232) (10) (394) (52) (417) (43) (227) (466) (21) (403))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6200) (6600) (6100) (6500) (6400) (6200) (6600) (6600) (6800) (6700) (6600) (6700) (6500) (6200) (6800) (6800) (6700) (6700) (6800) (6100) (6400) (6800) (6200) (6100) (6400) (6000) (6300) (6400) (6800) (6300) (6400) (6300) (6700) (6700) (6500))) :lonset (quote (0 1000 3000 7700 6000 7000 1600 5300 9000 2600 6300 5600 2900 6600 200 4900 2200 5900 6900 4200 8900 9900 3500 1800 2800 100 6800 8800 1400 5100 4400 8100 700 1700 2700 9967)) :ldur (quote ((19) (56) (76) (122) (119) (88) (21) (51) (28) (101) (15) (122) (10) (109) (28) (126) (14) (124) (87) (91) (85) (67) (104) (126) (26) (38) (127) (68) (39) (93) (86) (53) (36) (94) (74))) :lvel (quote ((142) (334) (274) (176) (51) (243) (469) (253) (181) (61) (250) (467) (355) (127) (308) (477) (73) (180) (75) (440) (228) (135) (111) (256) (331) (265) (281) (65) (41) (442) (481) (287) (68) (103) (373))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote g) (quote g) (quote g) (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 252 42) (quote "output is a list of chord-seqs, one $for each cluster found, sorted by mean pitch") "" (om-make-point 496 124) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VECTOR-SPACE" (quote omai::vector-space) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "hash-table containing vs-vectors" "vectors" nil) (om-load-inputfun (quote input-funbox) "a list of features used for display and clustering" "features" nil) (om-load-inputfun (quote input-funbox) "hash-table containing classes number of clustering" "classes" nil))) (om-make-point 123 388) (om-make-point 70 50) (if (find-class (quote omai::vector-space) nil) (make-instance (quote omai::vector-space) :vectors (let ((hashtable (make-hash-table))) (loop for key in (list 0 7500 3100 6200 1800 9300 4900 500 8000 3600 6700 2300 9800 5400 1000 8500 4100 7200 2800 5900 1500 9000 4600 200 7700 3300 6400 2000 9500 5100 700 8200 3800 6900 2500 5600 1200 8700 4300 7400 3000 6100 1700 9200 4800 400 7900 3500 6600 2200 9700 5300 900 8400 4000 7100 2700 5800 1400 8900 4500 100 7600 3200 6300 1900 9400 5000 600 8100 3700 6800 2400 9900 5500 1100 8600 4200 7300 2900 6000 1600 9100 4700 300 7800 3400 6500 2100 9600 5200 800 8300 3900 7000 2600 5700 1300 8800 4400) for val in (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) do (sethash hashtable key val)) hashtable) :features (list (list 0 nil) (list 100 nil) (list 200 nil) (list 300 nil) (list 400 nil) (list 500 nil) (list 600 nil) (list 700 nil) (list 800 nil) (list 900 nil) (list 1000 nil) (list 1100 nil) (list 1200 nil) (list 1300 nil) (list 1400 nil) (list 1500 nil) (list 1600 nil) (list 1700 nil) (list 1800 nil) (list 1900 nil) (list 2000 nil) (list 2100 nil) (list 2200 nil) (list 2300 nil) (list 2400 nil) (list 2500 nil) (list 2600 nil) (list 2700 nil) (list 2800 nil) (list 2900 nil) (list 3000 nil) (list 3100 nil) (list 3200 nil) (list 3300 nil) (list 3400 nil) (list 3500 nil) (list 3600 nil) (list 3700 nil) (list 3800 nil) (list 3900 nil) (list 4000 nil) (list 4100 nil) (list 4200 nil) (list 4300 nil) (list 4400 nil) (list 4500 nil) (list 4600 nil) (list 4700 nil) (list 4800 nil) (list 4900 nil) (list 5000 nil) (list 5100 nil) (list 5200 nil) (list 5300 nil) (list 5400 nil) (list 5500 nil) (list 5600 nil) (list 5700 nil) (list 5800 nil) (list 5900 nil) (list 6000 nil) (list 6100 nil) (list 6200 nil) (list 6300 nil) (list 6400 nil) (list 6500 nil) (list 6600 nil) (list 6700 nil) (list 6800 nil) (list 6900 nil) (list 7000 nil) (list 7100 nil) (list 7200 nil) (list 7300 nil) (list 7400 nil) (list 7500 nil) (list 7600 nil) (list 7700 nil) (list 7800 nil) (list 7900 nil) (list 8000 nil) (list 8100 nil) (list 8200 nil) (list 8300 nil) (list 8400 nil) (list 8500 nil) (list 8600 nil) (list 8700 nil) (list 8800 nil) (list 8900 nil) (list 9000 nil) (list 9100 nil) (list 9200 nil) (list 9300 nil) (list 9400 nil) (list 9500 nil) (list 9600 nil) (list 9700 nil) (list 9800 nil) (list 9900 nil)) :classes nil :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 195 436) (om-make-point 26 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 25 76) (om-make-point 220 79) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6200) (6000) (6800) (7900) (8200) (7800) (7700) (6700) (8400) (7100) (6600) (7100) (7400) (7500) (6800) (8300) (6600) (6700) (6100) (7500) (8200) (8000) (6700) (7100) (6900) (7500) (6700) (6500) (6400) (6500) (6100) (7800) (7000) (8400) (7700) (6200) (7500) (7200) (7700) (8300) (8000) (7300) (6100) (7400) (6400) (8100) (7000) (8100) (7700) (6800) (8100) (6300) (8000) (6600) (8000) (6900) (6700) (7100) (8400) (6700) (6400) (8300) (8100) (6600) (7800) (7200) (6200) (7900) (6300) (6800) (6200) (8300) (6900) (7000) (8400) (7400) (7300) (6500) (7800) (8100) (7800) (6300) (7000) (6900) (8400) (7400) (7500) (7700) (6400) (6400) (6800) (7400) (8400) (8400) (7800) (8100) (7100) (7300) (7800) (6800))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700 2800 2900 3000 3100 3200 3300 3400 3500 3600 3700 3800 3900 4000 4100 4200 4300 4400 4500 4600 4700 4800 4900 5000 5100 5200 5300 5400 5500 5600 5700 5800 5900 6000 6100 6200 6300 6400 6500 6600 6700 6800 6900 7000 7100 7200 7300 7400 7500 7600 7700 7800 7900 8000 8100 8200 8300 8400 8500 8600 8700 8800 8900 9000 9100 9200 9300 9400 9500 9600 9700 9800 9900 10197)) :ldur (quote ((142) (265) (308) (353) (244) (124) (350) (68) (414) (445) (334) (43) (473) (145) (41) (255) (469) (103) (256) (155) (407) (437) (73) (70) (21) (86) (61) (373) (331) (355) (274) (405) (139) (99) (23) (111) (487) (132) (429) (410) (306) (466) (440) (85) (481) (250) (321) (205) (120) (477) (71) (442) (411) (253) (46) (394) (467) (366) (415) (180) (51) (66) (323) (250) (369) (52) (127) (195) (281) (75) (243) (283) (232) (216) (348) (417) (386) (176) (475) (52) (417) (287) (10) (396) (400) (227) (379) (37) (65) (228) (181) (403) (73) (152) (88) (267) (155) (423) (397) (135))) :lvel (quote ((19) (38) (28) (45) (55) (62) (29) (36) (112) (18) (56) (116) (114) (126) (39) (103) (21) (94) (126) (54) (27) (87) (14) (84) (74) (20) (101) (74) (26) (10) (76) (123) (32) (104) (117) (104) (114) (24) (11) (38) (49) (101) (91) (47) (86) (22) (112) (77) (52) (126) (41) (93) (39) (51) (90) (60) (122) (110) (31) (124) (119) (113) (22) (15) (29) (79) (109) (84) (127) (87) (88) (94) (82) (43) (110) (116) (55) (122) (124) (90) (83) (53) (22) (119) (61) (93) (37) (123) (68) (85) (28) (23) (88) (74) (91) (55) (124) (105) (74) (67))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 101 28) (quote "input chord-seq") "" (om-make-point 84 169) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (8 1 1 1 nil 0) (2 0 1 3 nil 0) (8 1 2 0 nil 0) (9 0 2 1 nil 0) (10 0 3 0 nil 0) (0 0 6 1 nil 0) (3 0 8 1 nil 0))) nil 6.140003))
