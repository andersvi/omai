; OM File Header - Saved 2018/06/16 23:55:50
; (6.1301 :patc (om-make-point 226 10) (om-make-point 658 0) (om-make-point 879 770) "" 183 0 "2018/06/14 17:03:06" "2018/06/16 23:55:50")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "k-means" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 83 49) (om-make-point 38 30) 800 "800" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EXTRACT-FEATURE-VECTORS" (quote extract-feature-vectors) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 205 280) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 241 217) (om-make-point 95 30) (list (quote lmidic) (quote ldur) (quote lvel)) "(lmidic ldur lvel)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "K-MEANS 3" (quote k-means) (quote ((om-load-inputfun (quote input-funbox) "OBSERVATIONS" "OBSERVATIONS" nil) (om-load-inputfun (quote input-funbox) "K" "K" nil))) (om-make-point 559 205) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 350 283) (om-make-point 32 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "K-MEANS 2" (quote k-means) (quote ((om-load-inputfun (quote input-funbox) "OBSERVATIONS" "OBSERVATIONS" (quote n)) (om-load-inputfun (quote input-funbox) "K" "K" 3))) (om-make-point 287 326) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "K-MEANS" (quote k-means) (quote ((om-load-inputfun (quote input-funbox) "OBSERVATIONS" "OBSERVATIONS" nil) (om-load-inputfun (quote input-funbox) "K" "K" nil))) (om-make-point 48 344) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "TESTCS2" (quote testcs2) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 65 79) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "KM->3DC-LIB" (quote km->3dc-lib) (quote ((om-load-inputfun (quote input-funbox) "VECS" "VECS" nil))) (om-make-point 384 391) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "3DC-LIB" (quote 3dc-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of 3DC objects" "bpf-list" (list (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote nil) (quote nil) (quote nil) (quote 3dc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) nil)) newobj))))) (om-make-point 438 491) (om-make-point 261 187) (if (find-class (quote 3dc-lib) nil) (make-instance (quote 3dc-lib) :bpf-list (list (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.6667 -0.5 -0.1667 -0.9167 -0.4167 -1.0 -0.0833 -0.4167 -0.9167 -0.3333 -0.3333 -0.6667 -0.5833 -0.3333 -0.1667 -1.0 -0.1667 -0.6667 -1.0 -0.75 -0.3333 -0.5 -0.4167 -0.1667 -0.5 -0.1667 -0.1667 -0.75 -0.5833 -0.0833 -0.5833 -0.8333 -0.75 -0.6667 -0.8333 -0.4167 -0.5 -0.5 -1.0 -0.9167 -0.75 -0.25 -0.75 -0.5833 -1.0 -0.4167 -0.4167 -0.8333 -0.0833 -0.75 -0.3333 -0.75 -0.5833 -0.25 -1.0 -0.25 -0.4167 -0.3333 -1.0 -0.5833 -0.3333 -0.4167 -1.0 -0.0833 -0.75 -0.0833 -0.25 -1.0 -0.1667 -0.75 -1.0 -0.3333 -0.3333 -0.6667 -0.75 -0.5833 -0.4167 -0.1667 -0.5833 -0.6667 -0.9167 -0.8333 -0.5833 -0.8333 -1.0 -0.3333 -0.1667)) (quote (0.951 0.0612 0.249 0.5469 0.6327 0.6082 0.3918 -0.0041 0.0204 0.2653 0.6898 0.9878 0.3633 0.5224 0.902 0.3918 0.4163 0.1592 0.0041 0.9755 0.2367 0.2816 0.8408 0.302 0.8735 0.3429 0.3796 0.3347 0.4898 0.3592 0.9633 0.7714 0.6735 0.8367 0.6 0.5837 0.0163 0.4204 0.6857 0.5878 0.6531 0.4327 0.6612 0.1633 0.9959 0.7347 0.8816 0.7469 0.5837 0.8898 0.3224 0.7551 0.8367 0.7714 0.8531 0.9102 0.1633 0.5918 0.5224 0.5347 0.9224 0.4898 0.5102 0.2122 0.0694 0.4449 0.2327 0.2122 0.4735 -0.0163 0.0449 0.4204 0.6367 0.5959 0.4776 0.6612 0.5184 0.1633 0.4571 0.9959 0.8449 0.5061 0.6082 0.049 0.6816 0.4286 0.8408)) (quote (-0.1111 -0.7265 -0.6581 -0.1111 -0.2137 -0.7265 -0.4017 -0.5043 -0.7607 -0.7607 -0.5897 -0.3162 -0.1453 -0.5385 -0.2479 -0.5897 -0.8803 -0.4872 -0.6581 -0.5385 -0.4188 -0.2479 -0.2137 -0.7778 -0.7607 -0.8291 -0.7778 -0.265 -0.4188 -0.8974 -0.7265 -0.641 -0.265 -0.4359 -0.7949 -0.7265 -0.4701 -0.265 -0.5726 -0.8462 -0.8803 -0.1795 -0.5043 -0.5726 -0.5556 -0.7436 -0.7949 -0.5385 -0.4017 -0.3333 -0.7436 -0.8291 -0.6752 -0.5726 -0.7436 -0.5556 -0.6752 -0.9316 -0.1624 -0.1111 -0.9829 -0.6068 -0.9829 -0.3675 -0.7949 -0.6923 -0.6068 -0.7607 -0.8803 -0.6923 -0.812 -0.8291 -0.6581 -0.5043 -0.4017 -0.9145 -0.1966 -0.5385 -0.4701 -0.8974 -0.9145 -1.0 -0.3162 -0.641 -0.7778 -0.8632 -0.453)) (quote 3dc) 4))) (setf (bpfcolor newbpf) (om-make-color 0.46748233 0.9523022 0.577055)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.1111 -0.7265 -0.6581 -0.1111 -0.2137 -0.7265 -0.4017 -0.5043 -0.7607 -0.7607 -0.5897 -0.3162 -0.1453 -0.5385 -0.2479 -0.5897 -0.8803 -0.4872 -0.6581 -0.5385 -0.4188 -0.2479 -0.2137 -0.7778 -0.7607 -0.8291 -0.7778 -0.265 -0.4188 -0.8974 -0.7265 -0.641 -0.265 -0.4359 -0.7949 -0.7265 -0.4701 -0.265 -0.5726 -0.8462 -0.8803 -0.1795 -0.5043 -0.5726 -0.5556 -0.7436 -0.7949 -0.5385 -0.4017 -0.3333 -0.7436 -0.8291 -0.6752 -0.5726 -0.7436 -0.5556 -0.6752 -0.9316 -0.1624 -0.1111 -0.9829 -0.6068 -0.9829 -0.3675 -0.7949 -0.6923 -0.6068 -0.7607 -0.8803 -0.6923 -0.812 -0.8291 -0.6581 -0.5043 -0.4017 -0.9145 -0.1966 -0.5385 -0.4701 -0.8974 -0.9145 -1.0 -0.3162 -0.641 -0.7778 -0.8632 -0.453))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.9167 0.5 0.9167 0.8333 0.6667 0.8333 0.1667 1.0 1.0 0.5833 0.6667 0.5 0.9167 0.9167 0.9167 0.5 0.3333 0.25 1.0 0.8333 0.9167 0.4167 0.75 0.5 0.4167 0.5 0.4167 0.75 0.5 0.6667 0.75 0.6667 0.5 1.0 0.9167 0.25 0.9167 0.5 0.6667 0.5 0.25 0.9167 0.5 0.8333 1.0 0.5833 0.25 0.5833 1.0 0.5833 0.5 0.5 0.5833 0.5833 0.5833 0.25 0.75)) (quote (-0.4898 -0.9143 -0.898 -0.6 -0.9551 -0.5102 -0.7755 -0.7102 -0.898 -0.5347 -0.5347 -0.5429 -0.9959 -0.8816 -0.8082 -0.7837 -0.5918 -0.9837 -0.2939 -0.8816 -1.0 -0.9878 -0.9673 -0.9796 -0.4245 -0.9388 -0.8367 -0.9837 -0.3878 -0.6776 -0.8286 -0.4286 -0.8204 -0.649 -0.5714 -0.7347 -0.902 -0.7102 -0.5265 -0.7306 -0.6367 -0.4939 -0.6041 -0.4449 -0.7429 -0.4857 -0.9837 -0.8694 -0.6082 -0.5102 -0.8163 -0.6694 -0.3837 -0.9714 -0.351 -0.8571 -0.3755)) (quote (-0.3333 0.1282 0.1966 -0.5556 0.0085 0.0256 -0.3846 -0.2308 -0.0085 -0.2821 -0.0598 0.1966 0.0085 -0.5897 0.265 -0.1111 -0.3846 -0.4359 0.0769 -0.1111 -0.5385 -0.265 0.1453 -0.8291 -0.0256 -0.5897 -0.094 -0.3504 0.1453 -0.3504 -0.0085 -0.4017 0.1282 -0.3333 -0.2479 -0.6239 -0.5556 -0.7607 -0.453 -0.4359 -0.1282 0.0598 -0.3162 -0.4359 -0.1282 -0.4188 -0.0769 0.0085 -0.3675 -0.0598 -0.4017 -0.8462 0.0256 -1.0 0.0085 0.1624 -0.0256)) (quote 3dc) 4))) (setf (bpfcolor newbpf) (om-make-color 0.64017725 0.5193466 0.11553264)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.3333 0.1282 0.1966 -0.5556 0.0085 0.0256 -0.3846 -0.2308 -0.0085 -0.2821 -0.0598 0.1966 0.0085 -0.5897 0.265 -0.1111 -0.3846 -0.4359 0.0769 -0.1111 -0.5385 -0.265 0.1453 -0.8291 -0.0256 -0.5897 -0.094 -0.3504 0.1453 -0.3504 -0.0085 -0.4017 0.1282 -0.3333 -0.2479 -0.6239 -0.5556 -0.7607 -0.453 -0.4359 -0.1282 0.0598 -0.3162 -0.4359 -0.1282 -0.4188 -0.0769 0.0085 -0.3675 -0.0598 -0.4017 -0.8462 0.0256 -1.0 0.0085 0.1624 -0.0256))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.0833 -0.25 0.0833 -0.1667 -0.0833 0.0833 0.1667 0.1667 -0.0833 0.0 0.1667 -0.1667 -0.25 -0.3333 -0.1667 -0.0833 -0.0833 -0.3333 -0.5 -0.4167 0.0833 0.1667 0.25 0.0 0.0833 0.1667 -0.25 -0.0833 -0.0833 0.0 -0.3333 -0.25 -0.1667 -0.0833 0.0833 0.0 -0.4167 -0.1667 0.0 0.0 -0.1667 -0.1667 -0.0833 0.0833 -0.3333 0.1667 -0.1667 0.0 0.0 -0.0833 -0.4167 0.0833 0.25 0.1667 -0.1667 0.0833 -0.4167 0.25 -0.0833 -0.3333 -0.0833 0.0 -0.25 -0.1667 0.0 -0.1667)) (quote (-0.0082 -0.498 -0.702 -0.3469 0.0694 -0.3837 -0.6122 -0.4367 -0.9673 -0.0204 0.1714 -0.702 -0.5347 -0.7918 -0.9878 -0.1265 -0.0653 -0.649 -0.4531 0.0245 -0.5306 -0.3143 -0.5878 -0.4245 -0.6816 -0.7796 -0.2245 -0.6612 -0.3224 -0.0367 -0.2939 -0.2286 0.0204 0.0041 -0.6694 -0.249 0.0245 -0.6612 -0.4 -0.8204 -0.2286 0.1347 -0.1837 0.1551 -0.0857 -0.2612 -0.0286 -0.6082 -0.7592 -0.9673 -0.4 -0.0653 0.0571 -0.2857 -0.5347 0.0163 -0.2327 -0.3918 -0.8898 -0.4 -0.151 -0.7265 -0.498 -0.7143 -0.3388 -0.2163)) (quote (0.3675 0.0598 -0.0085 0.1795 -0.1795 0.1966 -0.3675 -0.0427 -0.1282 -0.2308 -0.0256 0.1282 -0.2991 -0.1624 -0.1795 0.0256 0.0769 -0.1453 0.094 -0.094 -0.4872 -0.265 0.0085 -0.0085 0.265 0.1282 0.1624 0.3675 -0.2308 -0.1624 0.1111 -0.3675 0.3675 0.4017 0.3162 0.0085 -0.1282 -0.3162 0.1966 -0.2137 -0.3675 -0.1453 -0.265 0.1624 0.1795 -0.1795 0.1282 0.094 -0.3162 0.0769 0.094 -0.1111 0.0427 -0.0085 0.3675 0.3846 -0.1111 -0.1453 0.3846 0.1624 -0.3333 0.0256 0.2991 0.0427 0.1453 0.1624)) (quote 3dc) 4))) (setf (bpfcolor newbpf) (om-make-color 0.23173929 0.56193996 0.5915369)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.3675 0.0598 -0.0085 0.1795 -0.1795 0.1966 -0.3675 -0.0427 -0.1282 -0.2308 -0.0256 0.1282 -0.2991 -0.1624 -0.1795 0.0256 0.0769 -0.1453 0.094 -0.094 -0.4872 -0.265 0.0085 -0.0085 0.265 0.1282 0.1624 0.3675 -0.2308 -0.1624 0.1111 -0.3675 0.3675 0.4017 0.3162 0.0085 -0.1282 -0.3162 0.1966 -0.2137 -0.3675 -0.1453 -0.265 0.1624 0.1795 -0.1795 0.1282 0.094 -0.3162 0.0769 0.094 -0.1111 0.0427 -0.0085 0.3675 0.3846 -0.1111 -0.1453 0.3846 0.1624 -0.3333 0.0256 0.2991 0.0427 0.1453 0.1624))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.4167 1.0 0.4167 1.0 0.5 1.0 0.3333 0.5 1.0 0.4167 0.8333 0.3333 0.0 0.5 0.4167 0.5833 0.6667 0.6667 1.0 0.25 0.25 0.75 0.5 0.3333 0.1667 0.5833 0.5 1.0 0.5833 0.0833 0.8333 0.75 0.4167 0.9167 0.5833 1.0 0.5833 0.1667 0.25 0.3333 1.0 0.5 0.9167 0.9167 0.5 0.9167 1.0 0.5833 0.75 0.1667 0.5 0.6667 0.9167 0.25 0.5 1.0 0.9167 0.4167 0.6667 0.9167 0.6667 1.0 0.3333 1.0)) (quote (0.1184 0.1796 -0.0857 0.1592 0.0041 0.2898 -0.3878 0.0327 0.3878 0.2449 -0.0776 -0.4163 0.0612 -0.1061 -0.5592 0.0163 0.0449 0.1224 -0.1102 0.0204 -0.2531 0.302 0.1592 -0.1306 0.0571 0.1469 -0.1551 0.1551 0.0041 -0.1837 -0.2245 -0.2163 0.3143 -0.0939 -0.2612 -0.4571 0.0245 -0.0939 -0.498 0.2163 -0.0653 -0.0571 -0.2408 -0.1224 -0.2367 0.2939 0.0367 -0.2571 0.1633 -0.1755 -0.2735 -0.4041 0.2939 -0.5592 0.0449 0.1878 0.0 0.0939 0.1061 -0.3143 0.049 -0.2571 0.3061 0.1633)) (quote (-1.0 -0.2991 -0.0598 -0.4188 -0.6239 -0.5726 -0.453 -0.3504 -0.6923 -0.6752 -0.0256 -0.4701 -0.7265 -0.1624 -0.9487 -0.1966 -0.265 -0.7436 -1.0 -0.3333 -0.812 -0.8291 -0.4701 -0.812 -0.3675 -0.3504 -0.3846 -0.8462 -0.9487 -0.5214 -0.9316 -0.6068 -0.1453 0.0598 -0.5043 -0.7949 -0.2308 -0.6923 -0.812 -0.9658 -0.453 -0.2137 -0.9829 -0.0256 -0.6581 -0.3675 -0.7094 -0.3846 -0.1453 -0.5043 -0.7094 -0.6068 -0.5556 -0.9487 -0.9658 -0.8803 -0.4188 -0.5385 -0.6068 -0.5556 0.0085 -0.5897 -0.2821 -0.3846)) (quote 3dc) 4))) (setf (bpfcolor newbpf) (om-make-color 0.6911576 0.8911382 0.82118786)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -1.0 -0.2991 -0.0598 -0.4188 -0.6239 -0.5726 -0.453 -0.3504 -0.6923 -0.6752 -0.0256 -0.4701 -0.7265 -0.1624 -0.9487 -0.1966 -0.265 -0.7436 -1.0 -0.3333 -0.812 -0.8291 -0.4701 -0.812 -0.3675 -0.3504 -0.3846 -0.8462 -0.9487 -0.5214 -0.9316 -0.6068 -0.1453 0.0598 -0.5043 -0.7949 -0.2308 -0.6923 -0.812 -0.9658 -0.453 -0.2137 -0.9829 -0.0256 -0.6581 -0.3675 -0.7094 -0.3846 -0.1453 -0.5043 -0.7094 -0.6068 -0.5556 -0.9487 -0.9658 -0.8803 -0.4188 -0.5385 -0.6068 -0.5556 0.0085 -0.5897 -0.2821 -0.3846))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.6667 -0.6667 -0.6667 -0.5 -0.1667 -0.1667 -0.8333 -0.9167 -0.8333 -0.8333 -0.3333 -0.75 -0.8333 -0.4167 -0.5833 -0.75 -0.0833 -0.8333 -1.0 -0.5 -0.5833 -0.8333 -0.5 -0.5 -0.75 -0.5 -0.3333 -0.9167 -0.8333 -0.25 -0.4167 -0.8333 -0.8333 -0.8333 -0.9167 -0.75 -0.5833 -0.1667 -0.9167 -1.0 -0.6667 -0.75 -0.8333 -0.5833 -0.8333 -0.75 -0.6667 -0.9167 -0.5 -0.25 -0.75 -0.5 -1.0 -0.5833 -0.75 -0.1667 -0.3333 -0.75 -0.6667 -0.25 -1.0 -0.8333 -0.8333 -0.8333 -0.5 -0.8333 -0.3333 -1.0 -0.8333 -0.9167 -0.9167 -0.9167 -0.8333 -0.1667 -0.6667 -0.5833 -0.3333 -0.8333 -0.9167 -0.1667 -0.3333 -0.5 -0.8333 -0.75 -0.5833 -0.75 -0.6667)) (quote (-0.2816 -0.6735 -0.2694 -0.8122 -0.2571 -0.1184 -0.7102 -0.7755 -0.7061 -0.4367 -0.2449 -0.5796 -0.8204 -0.6122 -0.1388 -0.298 -0.5061 -0.8041 -0.3959 -0.4694 -0.1551 -0.2816 -0.9796 -0.3061 -0.8286 -0.6041 -0.6653 -0.8204 -0.351 -0.6041 -0.8898 -0.5918 -0.7633 -0.9347 -0.0571 -0.5837 -0.5061 -0.4 -0.9388 -0.6082 -0.8245 -0.1388 0.0694 -0.2653 -0.3388 -0.0245 -0.5102 -0.4571 -0.4245 -0.4898 -0.5918 -0.0939 -0.0041 -0.9061 -0.8082 -0.7714 -0.0327 -0.9796 0.0531 -0.0776 -0.6367 -0.0735 -0.5306 -0.098 -0.2776 -0.2939 -0.6367 -0.0694 -0.7633 -0.4367 -0.7673 -0.5102 -0.8082 -0.7755 -0.5469 -0.9184 -0.502 -0.1592 -0.8653 -0.5796 -0.2041 -0.498 -0.3429 -0.1878 -0.1837 -0.2408 -0.5551)) (quote (0.5897 0.8632 0.7265 0.265 0.7949 0.641 0.812 0.7094 0.5214 0.1282 0.6581 0.641 0.3675 0.4701 0.8974 0.7949 0.6239 0.4872 -0.0769 0.5726 0.8291 0.0769 0.1111 0.1624 0.2821 0.812 0.2821 0.9316 0.7094 0.8462 0.3162 0.5897 0.094 0.1453 0.6581 0.0085 0.453 1.0 0.0085 0.3846 0.1624 0.1624 0.812 0.2308 0.9316 0.7094 0.7265 -0.094 0.9145 0.7607 0.7094 0.812 0.2821 0.5726 0.7436 0.7436 0.9658 0.1795 0.4872 0.9487 0.1795 0.6581 -0.094 0.8291 0.2821 0.9145 0.5214 0.265 0.4188 0.8803 0.5556 0.5556 0.1111 0.4701 0.7265 0.3333 0.453 0.2991 -0.0769 0.8462 0.8291 0.5385 0.8974 0.6581 0.7778 0.1453 0.1795)) (quote 3dc) 4))) (setf (bpfcolor newbpf) (om-make-color 0.07248509 0.6225718 0.3270036)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.5897 0.8632 0.7265 0.265 0.7949 0.641 0.812 0.7094 0.5214 0.1282 0.6581 0.641 0.3675 0.4701 0.8974 0.7949 0.6239 0.4872 -0.0769 0.5726 0.8291 0.0769 0.1111 0.1624 0.2821 0.812 0.2821 0.9316 0.7094 0.8462 0.3162 0.5897 0.094 0.1453 0.6581 0.0085 0.453 1.0 0.0085 0.3846 0.1624 0.1624 0.812 0.2308 0.9316 0.7094 0.7265 -0.094 0.9145 0.7607 0.7094 0.812 0.2821 0.5726 0.7436 0.7436 0.9658 0.1795 0.4872 0.9487 0.1795 0.6581 -0.094 0.8291 0.2821 0.9145 0.5214 0.265 0.4188 0.8803 0.5556 0.5556 0.1111 0.4701 0.7265 0.3333 0.453 0.2991 -0.0769 0.8462 0.8291 0.5385 0.8974 0.6581 0.7778 0.1453 0.1795))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.1667 -0.0833 0.25 0.5 0.4167 0.4167 0.4167 -0.0833 0.25 0.0 0.75 0.5 0.6667 0.5833 0.5833 0.5833 0.5833 -0.0833 0.0833 0.6667 0.9167 0.75 0.8333 0.25 0.5833 0.8333 0.75 0.25 0.1667 0.9167 0.5833 0.4167 0.1667 0.3333 0.0 0.5833 0.1667 0.3333 0.0833 0.5 0.25 0.4167 0.6667 0.0 0.25 0.1667 0.5 0.8333 0.0 0.6667 0.6667 0.5833 0.0 0.8333 0.25 0.25 0.9167 0.0 0.1667 0.4167 0.25 0.0833 0.9167 0.75 0.6667 0.0 0.0833 0.4167 0.5833)) (quote (0.3755 0.7918 0.4939 0.4531 0.3878 0.3184 0.4571 0.6898 0.9143 0.8408 0.4653 0.7306 0.9143 0.7633 0.8204 0.9347 0.7184 0.8245 0.6816 0.8653 0.7551 0.9837 0.8571 0.7102 0.6531 0.7633 0.6735 0.3143 0.6653 0.6612 0.7061 0.4694 0.8204 0.3959 0.9184 0.6327 0.7306 0.6571 0.9061 0.6816 0.9061 0.4408 0.8163 0.8653 0.4898 0.351 0.5714 0.8122 0.7592 0.9306 0.5673 0.8694 0.5796 0.6041 0.9796 0.9224 0.9592 0.751 0.2408 0.7959 0.951 0.8531 0.6939 0.9061 0.9347 0.9469 0.3633 0.5837 0.9224)) (quote (-0.9145 -0.3675 -0.8803 -0.8974 -0.6068 -0.9829 -0.3162 -0.9487 -0.7607 -0.1624 -0.4872 -0.5897 -0.7778 -0.5897 -0.8803 -0.8291 -0.4017 -0.9658 -0.641 -0.5897 -0.8462 -0.6239 -0.641 -0.5726 -0.8632 -0.9658 -0.453 -0.1966 -0.0427 -0.5043 -0.4188 -0.9487 -0.8291 -0.5385 -0.6752 -0.9145 -0.9316 -0.5726 -0.641 -0.1453 -0.4188 -0.5214 -0.6752 -0.3846 -0.8632 -0.8291 -0.8803 -0.6581 -0.9487 -0.5556 -0.9658 -0.8803 -0.4359 -0.641 -0.6239 -0.3162 -0.3675 -0.2991 -0.7094 -0.7436 -0.8291 -0.9145 -0.1795 -0.5556 -0.0427 -0.5726 -0.2479 -0.6068 -0.8974)) (quote 3dc) 4))) (setf (bpfcolor newbpf) (om-make-color 0.031498075 0.73783947 0.103093624)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.9145 -0.3675 -0.8803 -0.8974 -0.6068 -0.9829 -0.3162 -0.9487 -0.7607 -0.1624 -0.4872 -0.5897 -0.7778 -0.5897 -0.8803 -0.8291 -0.4017 -0.9658 -0.641 -0.5897 -0.8462 -0.6239 -0.641 -0.5726 -0.8632 -0.9658 -0.453 -0.1966 -0.0427 -0.5043 -0.4188 -0.9487 -0.8291 -0.5385 -0.6752 -0.9145 -0.9316 -0.5726 -0.641 -0.1453 -0.4188 -0.5214 -0.6752 -0.3846 -0.8632 -0.8291 -0.8803 -0.6581 -0.9487 -0.5556 -0.9658 -0.8803 -0.4359 -0.641 -0.6239 -0.3162 -0.3675 -0.2991 -0.7094 -0.7436 -0.8291 -0.9145 -0.1795 -0.5556 -0.0427 -0.5726 -0.2479 -0.6068 -0.8974))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.1667 -0.5833 -0.6667 -0.9167 -0.5 -0.1667 -0.8333 -0.5 -0.5 -0.5 -0.4167 -0.3333 0.0 -0.9167 -0.1667 -0.3333 -0.9167 -0.25 -0.3333 -0.5 -0.8333 -0.8333 -0.5833 -0.5 -0.25 -0.8333 -0.6667 -0.9167 -0.25 -0.5833 0.0 -0.5 -0.5 -0.5833 -0.5 0.0 -0.8333 -0.8333 -0.25 -0.4167 -0.8333 -1.0 -0.0833 -0.5833 -0.5 -0.0833 -0.25 -0.8333 -0.5833 -0.1667 0.0 -1.0 -0.4167 -0.9167 -0.8333 0.0 -0.3333 -0.3333 -0.4167 -0.6667 -0.5 -0.9167 -0.1667 -0.6667 0.0 -0.1667 -0.25 -0.5833 -0.0833 -0.6667 -0.9167 -0.1667 -0.6667 -0.25 -0.25 -0.3333 -0.75 -1.0 -0.75 -0.1667 -0.5833 -1.0 -1.0 -0.4167 -0.6667 -0.6667 -0.25 -0.8333 -0.0833 -0.25 -0.75 -0.0833 -0.6667 -0.6667)) (quote (0.9837 0.4245 0.3633 0.0898 0.1673 0.5796 0.951 0.3673 0.6367 0.3714 0.2816 0.9878 0.7265 0.4571 0.7102 0.702 0.9224 0.6898 0.5796 0.3429 0.1959 0.7429 0.7551 0.1959 0.8898 0.7959 0.9388 0.5959 0.9959 0.7388 0.7673 0.1878 0.2939 0.7429 0.2694 0.6122 0.5592 0.3184 0.5265 0.6735 0.2776 0.8163 0.6735 0.951 0.7184 0.9673 0.4776 0.9796 0.1224 0.3429 0.5061 0.8449 0.1429 0.5878 0.6531 0.9551 0.1429 0.8857 0.8286 0.9388 0.6776 0.1469 0.2571 0.6776 0.4286 0.9878 0.5796 0.5224 0.4939 0.7265 0.7143 0.4776 0.849 0.9959 0.3592 0.898 0.4735 0.6122 0.8735 0.4163 0.3551 0.4531 0.3633 0.8531 0.0776 0.3469 0.9673 0.9755 0.6449 0.4163 0.9265 0.2694 0.1878 0.351)) (quote (0.6581 0.4701 0.2821 0.1111 0.1966 0.6752 0.7778 0.4359 0.7436 0.2308 0.3675 0.5214 0.8462 0.2308 0.2821 0.8803 0.7436 0.3333 0.7607 0.0427 0.6752 0.094 0.5726 0.1453 0.6752 0.2137 0.8632 0.6581 -0.094 0.1111 0.5897 0.812 0.1966 0.3162 0.8803 0.641 0.5726 0.0769 0.9145 0.3162 0.7265 0.1795 0.3333 0.4359 0.2821 0.3504 -0.0256 0.3675 0.9487 0.5726 0.094 0.1111 0.9316 0.5726 0.0769 0.641 0.5214 0.0598 0.0256 0.9658 0.9145 0.7949 0.3333 0.4017 0.3675 0.5897 0.1966 0.5214 0.2821 0.0769 0.1282 0.0085 0.1282 0.7265 0.1282 0.0598 0.4872 0.265 -0.0085 0.7607 0.2479 0.4188 0.3846 0.1966 0.0085 1.0 0.8462 0.2821 0.0427 0.2479 0.6923 1.0 0.9829 0.7094)) (quote 3dc) 4))) (setf (bpfcolor newbpf) (om-make-color 0.19658423 0.518203 0.8024521)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.6581 0.4701 0.2821 0.1111 0.1966 0.6752 0.7778 0.4359 0.7436 0.2308 0.3675 0.5214 0.8462 0.2308 0.2821 0.8803 0.7436 0.3333 0.7607 0.0427 0.6752 0.094 0.5726 0.1453 0.6752 0.2137 0.8632 0.6581 -0.094 0.1111 0.5897 0.812 0.1966 0.3162 0.8803 0.641 0.5726 0.0769 0.9145 0.3162 0.7265 0.1795 0.3333 0.4359 0.2821 0.3504 -0.0256 0.3675 0.9487 0.5726 0.094 0.1111 0.9316 0.5726 0.0769 0.641 0.5214 0.0598 0.0256 0.9658 0.9145 0.7949 0.3333 0.4017 0.3675 0.5897 0.1966 0.5214 0.2821 0.0769 0.1282 0.0085 0.1282 0.7265 0.1282 0.0598 0.4872 0.265 -0.0085 0.7607 0.2479 0.4188 0.3846 0.1966 0.0085 1.0 0.8462 0.2821 0.0427 0.2479 0.6923 1.0 0.9829 0.7094))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.3333 0.0 -0.1667 -0.1667 -0.1667 -0.6667 -0.5 -0.5833 -0.4167 -0.8333 -0.3333 -0.4167 -0.5833 -0.9167 -0.25 -0.25 -0.0833 -0.75 -0.75 -0.25 -0.3333 -0.5 -0.8333 -0.9167 0.0833 -0.3333 -1.0 -0.25 -0.5 -0.1667 -0.25 0.1667 -1.0 -1.0 0.0 -0.75 -0.6667 -0.4167 -0.5 -0.3333 -0.75 -0.8333 -0.25 0.1667 -0.4167 -0.3333 -0.25 -0.3333 -0.5 -0.3333 0.1667 -0.8333 -0.8333 -0.5 -0.4167 -0.6667 -1.0 -0.5833 -0.6667 -0.5 -0.25 -0.6667 -0.1667 -1.0 -0.75 -0.1667 -0.6667 -0.6667 -0.5 -0.1667 -1.0 -0.25 -0.3333 -0.6667 -0.75 -0.0833 -0.75 -0.3333 0.0833 -0.1667 -0.6667 -0.3333 -0.0833 -0.5833 -0.9167 -0.9167 -0.75 -0.4167 -1.0 -0.6667 -0.25)) (quote (-0.298 -0.9918 -0.7959 -0.1551 -0.7551 -0.502 -0.2612 -0.951 -0.8857 -0.2 -0.2449 -0.8408 -0.1714 -0.8245 -0.5796 -0.8531 -0.2735 -0.8531 -0.2857 -0.8939 -0.3143 -0.5755 -0.8367 -0.3184 -0.4449 -0.4816 -0.1388 -0.5429 -0.0653 -0.3796 -0.6041 -0.7388 -0.1143 -0.1837 -0.951 -0.1061 -0.2857 -0.4898 -0.151 -0.7429 -0.3143 -0.8367 -0.4041 -0.8408 -0.8 -0.8041 -0.5837 -0.4653 -0.2776 -0.1673 -0.9143 -0.5306 -0.2082 -0.4939 -0.5469 -0.4857 -0.8694 -0.7224 -0.9673 -0.3796 -0.9592 -0.1633 -0.7224 -0.3306 -0.9061 -0.649 -0.3224 -0.2082 -0.1959 -0.5143 -0.6735 -0.1714 -0.3633 -0.4653 -0.8776 -0.8816 -0.9102 -0.5306 -0.7306 -0.5796 -0.9347 -0.4735 -0.8408 -0.9265 -0.2 -0.6122 -0.8898 -0.9388 -0.9959 -0.7429 -0.5959)) (quote (-0.3675 -0.4017 -0.3162 -0.8803 -0.7094 -0.7436 -0.4701 -0.1966 -0.6752 -0.9487 -0.5726 -0.9658 -0.8462 -0.2991 -0.8803 -0.4359 -0.8291 -0.5556 -0.1282 -0.5385 -0.8974 -0.453 -0.9145 -0.8803 -0.812 -0.812 -0.4872 -0.3504 -0.3162 -0.9829 -0.6752 -0.7949 -0.8803 -0.8974 -0.4701 -0.9829 -0.8803 -0.8974 -0.9658 -0.5214 -0.5897 -0.6923 -0.9658 -0.8803 -0.6581 -0.5043 -0.8803 -0.7949 -0.2991 -0.5897 -0.7949 -0.4701 -0.7949 -0.4701 -0.8291 -0.6239 -0.6239 -0.2479 -0.4701 -0.5214 -0.6923 -0.3846 -0.6239 -0.265 -0.812 -0.8632 -0.4701 -0.9145 -0.812 -0.5043 -0.4872 -0.812 -0.5043 -0.5043 -0.2821 -0.7265 -0.641 -0.2991 -0.8974 -0.5043 -0.6752 -0.4017 -0.6752 -0.812 -0.6068 -0.1624 -0.1795 -0.9487 -0.5726 -0.5214 -0.5043)) (quote 3dc) 4))) (setf (bpfcolor newbpf) (om-make-color 0.1968807 0.03943515 0.6788119)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.3675 -0.4017 -0.3162 -0.8803 -0.7094 -0.7436 -0.4701 -0.1966 -0.6752 -0.9487 -0.5726 -0.9658 -0.8462 -0.2991 -0.8803 -0.4359 -0.8291 -0.5556 -0.1282 -0.5385 -0.8974 -0.453 -0.9145 -0.8803 -0.812 -0.812 -0.4872 -0.3504 -0.3162 -0.9829 -0.6752 -0.7949 -0.8803 -0.8974 -0.4701 -0.9829 -0.8803 -0.8974 -0.9658 -0.5214 -0.5897 -0.6923 -0.9658 -0.8803 -0.6581 -0.5043 -0.8803 -0.7949 -0.2991 -0.5897 -0.7949 -0.4701 -0.7949 -0.4701 -0.8291 -0.6239 -0.6239 -0.2479 -0.4701 -0.5214 -0.6923 -0.3846 -0.6239 -0.265 -0.812 -0.8632 -0.4701 -0.9145 -0.812 -0.5043 -0.4872 -0.812 -0.5043 -0.5043 -0.2821 -0.7265 -0.641 -0.2991 -0.8974 -0.5043 -0.6752 -0.4017 -0.6752 -0.812 -0.6068 -0.1624 -0.1795 -0.9487 -0.5726 -0.5214 -0.5043))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.1667 0.6667 0.3333 0.1667 0.25 0.1667 0.6667 1.0 0.0833 0.3333 0.9167 0.25 0.8333 0.6667 0.4167 0.5833 0.6667 0.1667 0.5833 0.1667 0.9167 0.75 0.5833 0.8333 0.8333 0.9167 1.0 0.25 0.5 0.25 0.25 0.5833 0.3333 0.9167 0.25 0.5 0.1667 0.9167 0.4167 0.3333 0.5 0.9167 0.3333 0.25 0.4167 0.8333 0.8333 0.5833 0.75 0.4167 0.25 0.6667 1.0 0.75 0.9167 0.5 0.3333 1.0 0.1667 0.6667 0.8333 0.5 0.75 0.4167 0.6667 0.25 0.5833 0.5 0.3333 1.0 0.5 0.9167 0.75 0.25 1.0 0.5 0.5833 0.8333 0.25 0.6667 0.5 0.6667 0.3333 0.6667 0.6667 0.6667 0.8333 0.75 0.4167 0.6667 0.9167 0.5 1.0 0.5 0.75 0.4167 0.4167 0.5833 0.5833 1.0 0.5833 0.6667 0.75 0.4167 0.9167 0.8333 0.75)) (quote (0.902 0.4857 0.2898 0.9633 0.9673 0.3878 0.7102 0.4776 0.249 0.5265 0.9796 0.9347 0.1469 1.0 0.1388 0.4735 0.6 0.1143 0.1551 0.2857 0.9673 0.2735 0.3306 0.4776 0.1469 0.751 0.6735 0.3673 0.5224 0.9592 0.2041 0.1388 0.9143 0.8327 0.5551 0.2816 0.4857 -0.0653 0.2612 0.7061 0.1224 0.7714 0.8041 0.1796 0.6694 0.3633 0.4204 0.6776 0.4122 0.0571 0.1633 0.351 -0.0776 0.0 0.1633 0.3306 0.3469 0.751 0.4327 0.5061 0.1714 0.2653 0.4939 0.098 0.2041 0.0204 0.2939 0.4 0.9673 0.5224 0.1837 0.3755 0.3306 0.2041 -0.0204 0.6939 0.7592 0.702 0.2082 0.7878 -0.0694 0.9102 0.7143 0.3388 0.751 0.2449 0.3837 0.6571 0.1224 0.0367 0.8939 0.0163 0.9837 0.6041 0.1184 0.2041 0.9184 0.3102 0.8816 0.3837 0.9714 0.1755 0.6571 -0.0816 0.0245 0.9347 0.2327)) (quote (0.9487 0.641 0.2479 0.5726 0.3504 0.3846 0.3333 -0.0769 1.0 -0.0598 0.2991 0.6239 0.9658 0.4872 0.2821 0.5897 0.8632 0.8632 0.6239 0.2821 0.9658 0.1795 0.6068 -0.094 0.3846 0.9829 0.2479 0.4872 1.0 0.2479 0.1795 0.3504 0.2137 -0.0085 0.1282 0.7265 0.4701 0.4017 -0.0769 0.0427 0.453 0.0256 0.5043 0.7949 0.2308 0.7265 0.6068 0.5043 0.5214 0.2308 0.3504 0.9829 0.6068 0.1453 0.6923 0.7607 0.1966 0.7949 0.3675 0.8803 0.1453 -0.0256 0.2991 0.3333 0.5897 0.5556 -0.0598 0.2308 0.4017 -0.0085 0.0598 0.641 0.1795 -0.0427 0.9316 0.094 0.5385 0.453 0.7265 0.8632 0.5385 0.9658 0.453 0.1966 0.9487 0.4701 0.8462 0.5385 -0.0085 0.6581 -0.0598 0.5726 0.1795 0.3675 0.2479 0.9487 0.7094 0.8974 0.8632 0.0427 0.1453 0.094 -0.0598 0.2821 0.8462 0.7949 0.5726)) (quote 3dc) 4))) (setf (bpfcolor newbpf) (om-make-color 0.9192215 0.45446634 0.54075444)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.9487 0.641 0.2479 0.5726 0.3504 0.3846 0.3333 -0.0769 1.0 -0.0598 0.2991 0.6239 0.9658 0.4872 0.2821 0.5897 0.8632 0.8632 0.6239 0.2821 0.9658 0.1795 0.6068 -0.094 0.3846 0.9829 0.2479 0.4872 1.0 0.2479 0.1795 0.3504 0.2137 -0.0085 0.1282 0.7265 0.4701 0.4017 -0.0769 0.0427 0.453 0.0256 0.5043 0.7949 0.2308 0.7265 0.6068 0.5043 0.5214 0.2308 0.3504 0.9829 0.6068 0.1453 0.6923 0.7607 0.1966 0.7949 0.3675 0.8803 0.1453 -0.0256 0.2991 0.3333 0.5897 0.5556 -0.0598 0.2308 0.4017 -0.0085 0.0598 0.641 0.1795 -0.0427 0.9316 0.094 0.5385 0.453 0.7265 0.8632 0.5385 0.9658 0.453 0.1966 0.9487 0.4701 0.8462 0.5385 -0.0085 0.6581 -0.0598 0.5726 0.1795 0.3675 0.2479 0.9487 0.7094 0.8974 0.8632 0.0427 0.1453 0.094 -0.0598 0.2821 0.8462 0.7949 0.5726))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (1.0 0.8333 0.4167 0.3333 0.9167 0.75 0.25 0.75 0.6667 0.25 0.5833 0.3333 0.0 0.3333 0.5833 0.75 0.5 0.5 0.4167 0.0 0.5833 0.5 0.1667 0.4167 0.25 0.25 0.0833 0.0 0.0 0.3333 0.3333 0.4167 0.8333 0.75 0.5 0.5833 0.25 0.4167 0.25 -0.0833 0.4167 1.0 0.75 0.5833 0.9167 0.4167 0.8333 1.0 0.75 0.3333 1.0 0.3333 0.25 0.9167 1.0 0.8333 -0.0833 0.5833 0.3333 0.75 0.5 0.0833 0.0833 0.5833 0.5833 0.75 0.5833 0.5 0.3333 0.6667 0.6667 0.6667 0.25 0.8333 0.1667 0.75 0.9167 0.1667)) (quote (-0.9755 -0.6204 -0.702 -0.6776 -0.5347 -0.3959 -0.5959 -0.3429 -0.7755 -0.5306 -0.7878 -0.5102 -0.7633 -0.2163 -0.5918 -0.5673 -0.3755 -0.9592 -0.8327 -0.8571 -0.1265 -0.1878 -0.2449 -0.4041 -0.6531 -0.3673 -0.7061 -0.9878 -0.7551 -0.102 -0.849 -0.5959 -0.6367 -0.9878 -0.8 -0.4776 -0.2408 -0.8694 -0.7878 -0.9143 -0.751 -0.9061 -0.6286 -0.1265 -0.5102 -0.0939 -0.2531 -0.6286 -0.9918 -0.3633 -0.6571 -0.8408 -0.2694 -0.9265 -0.9347 -0.8449 -0.502 -0.8 -0.3347 -0.951 -1.0 -0.5796 -0.9224 -0.4245 -0.4041 -0.5224 -0.6816 -0.9878 -0.7592 -0.9469 -0.1837 -0.3714 -0.5755 -0.249 -0.6735 -0.1918 -0.7714 -0.9265)) (quote (0.7265 0.9145 0.5214 0.5385 0.4701 0.5043 0.641 0.3162 0.9487 0.6068 0.9829 0.7607 0.7265 1.0 0.9145 0.4188 0.641 0.6752 0.8462 0.7949 0.7949 0.8803 0.641 0.7094 0.4017 0.8291 0.5556 0.8632 0.5385 0.6239 0.7607 0.4017 0.9316 0.812 0.2991 0.9658 0.8291 0.9829 0.7949 0.6752 0.812 0.8803 0.5556 0.5043 0.3162 0.7949 1.0 0.6068 0.8974 0.6239 0.6581 0.2821 0.8291 0.3504 0.9316 0.3333 0.812 0.8803 0.8632 0.9487 0.3675 0.5726 0.9145 0.9829 0.2137 0.8632 0.8462 0.8291 0.812 0.5897 0.4701 0.7436 0.3333 0.6068 0.4017 0.4188 0.4701 0.4017)) (quote 3dc) 4))) (setf (bpfcolor newbpf) (om-make-color 0.41330397 0.6106118 0.6969514)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.7265 0.9145 0.5214 0.5385 0.4701 0.5043 0.641 0.3162 0.9487 0.6068 0.9829 0.7607 0.7265 1.0 0.9145 0.4188 0.641 0.6752 0.8462 0.7949 0.7949 0.8803 0.641 0.7094 0.4017 0.8291 0.5556 0.8632 0.5385 0.6239 0.7607 0.4017 0.9316 0.812 0.2991 0.9658 0.8291 0.9829 0.7949 0.6752 0.812 0.8803 0.5556 0.5043 0.3162 0.7949 1.0 0.6068 0.8974 0.6239 0.6581 0.2821 0.8291 0.3504 0.9316 0.3333 0.812 0.8803 0.8632 0.9487 0.3675 0.5726 0.9145 0.9829 0.2137 0.8632 0.8462 0.8291 0.812 0.5897 0.4701 0.7436 0.3333 0.6068 0.4017 0.4188 0.4701 0.4017))) newobj)) :from-file t)) nil nil (pairlis (quote (picture bg-color line-width room-size show-room show-axes mode winpos winsize)) (list nil nil 1.0 3 1 1 0 (om-make-point 0 0) (om-make-point 711 575))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "3DC-LIB" (quote 3dc-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of 3DC objects" "bpf-list" (list (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote nil) (quote nil) (quote nil) (quote 3dc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) nil)) newobj))))) (om-make-point 562 370) (om-make-point 48 64) (if (find-class (quote 3dc-lib) nil) (make-instance (quote 3dc-lib) :bpf-list (list (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.645 0.6949 0.7787 0.9179)) (quote (0.0954 0.1602 0.5811 0.2048)) (quote (0.262 0.3483 0.4362 0.1711)) (quote 3dc) 4))) (setf (bpfcolor newbpf) (om-make-color 0.4721663 0.7277801 0.6622212)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.262 0.3483 0.4362 0.1711))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.0591 0.4029 0.1239 0.002)) (quote (0.2979 0.005 0.2078 0.4558)) (quote (0.0395 0.3837 0.4681 0.1581)) (quote 3dc) 4))) (setf (bpfcolor newbpf) (om-make-color 0.2087177 0.8199123 0.7463232)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.0395 0.3837 0.4681 0.1581))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.4808 0.2088 0.654 0.422 0.4209 0.52 0.4328 0.3012 0.6328 0.3021)) (quote (0.5416 0.4291 0.2876 0.2724 0.0196 0.1941 0.2108 0.1924 0.2719 0.5142)) (quote (0.7912 0.8358 0.5975 0.969 0.8569 0.5759 0.9996 0.6297 0.7476 0.8903)) (quote 3dc) 4))) (setf (bpfcolor newbpf) (om-make-color 0.14469111 0.6675017 0.8456266)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.7912 0.8358 0.5975 0.969 0.8569 0.5759 0.9996 0.6297 0.7476 0.8903))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.2057 0.5623 0.7577 0.4364 0.1097 0.548 0.2117 0.7715)) (quote (0.9304 0.9083 0.8565 0.6547 0.8845 0.9987 0.6875 0.8922)) (quote (0.696 0.8693 0.6511 0.0353 0.1187 0.1427 0.5531 0.5642)) (quote 3dc) 4))) (setf (bpfcolor newbpf) (om-make-color 0.85519434 0.94703687 0.10106993)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.696 0.8693 0.6511 0.0353 0.1187 0.1427 0.5531 0.5642))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.9337 0.6527 0.9513 0.8498)) (quote (0.2092 0.4303 0.8621 0.2665)) (quote (0.9838 0.8092 0.9574 0.6649)) (quote 3dc) 4))) (setf (bpfcolor newbpf) (om-make-color 0.950853 0.6407645 0.5385101)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.9838 0.8092 0.9574 0.6649))) newobj)) :from-file t)) nil nil (pairlis (quote (picture bg-color line-width room-size show-room show-axes mode winpos winsize)) (list nil nil 1.0 2 1 1 0 (om-make-point 0 0) (om-make-point 942 686))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 529 56) (om-make-point 32 30) 30 "30" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "R20-3D" (quote r20-3d) (quote ((om-load-inputfun (quote input-funbox) "N" "N" nil))) (om-make-point 513 86) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 592 127) (om-make-point 26 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LCS-FROM-LLMC" (quote lcs-from-llmc) (quote ((om-load-inputfun (quote input-funbox) "LLMIDIC" "LLMIDIC" nil))) (om-make-point 83 397) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 38 484) (om-make-point 331 227) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8400) (8300) (7900) (8200) (8400) (7800) (8200) (7800) (8000) (8300) (8000) (8400) (8200) (7900) (8400) (7800) (7800) (8100) (8200) (8400) (7800) (8400) (8200) (8000) (8000) (8200) (7800) (8000) (8000) (8400) (8400) (8000) (8100) (7900) (8300) (7800) (8000) (7900) (8300) (7900) (8300) (8200) (7800) (8200) (7900) (8300) (8200) (8400) (8400) (8400) (8000) (7900) (7800) (8100) (7800) (8100) (8000) (8300) (8200) (7900) (8300) (8200) (8200) (8300) (8200) (7900) (8300) (8200) (7900) (8000) (8300) (8300) (8200) (8200) (8000) (8200) (8400) (8400) (8000) (8100) (8400) (7900) (7900) (7800) (7900) (8200) (8000) (7800) (7800) (7900) (8200) (8400) (8100) (7800) (7900) (8100) (8200) (8100) (8400) (7800) (8400) (8400) (8100) (8300) (8400) (7800) (7900) (8000) (7800) (8200) (7900) (8300) (8200) (7800) (8400) (8300) (7800) (8000) (7900) (8000) (8400) (8100) (7800) (7800) (8200) (8100) (7800) (8100) (7800) (8100) (7800) (8400) (7900) (7900) (7900) (8300) (8000) (8000) (7900) (8200) (7800) (8400) (8200) (7800) (8400) (8400) (8300) (8000) (8300) (8100) (7800) (7800) (7800) (7900) (7900) (7900) (8400) (8200) (7900) (8100) (8300) (8400) (8100) (7900) (8100) (7900) (8300) (7900) (8300) (8000) (8100) (8000) (8100) (8000) (8400) (7900) (8200) (8400) (8300) (7900) (8100) (7900) (8200) (8000) (7800) (8100) (8200) (8400) (8400) (8200) (8400) (7800) (7800) (8200) (8000) (8200) (8400) (7800) (7800) (8300))) :lonset (quote (50 1050 2050 3050 4050 5050 6050 7050 8050 9050 10050 11050 12050 13050 14050 15050 16050 17050 18050 19050 20050 21050 22050 23050 24050 25050 26050 27050 28050 29050 30050 31050 32050 33050 34050 35050 36050 37050 38050 39050 40050 41050 42050 43050 44050 45050 46050 47050 48050 49050 50050 51050 52050 53050 54050 55050 56050 57050 58050 59050 60050 61050 62050 63050 64050 65050 66050 67050 68050 69050 70050 71050 72050 73050 74050 75050 76050 77050 78050 79050 80050 81050 82050 83050 84050 85050 86050 87050 88050 89050 90050 91050 92050 93050 94050 95050 96050 97050 98050 99050 100050 101050 102050 103050 104050 105050 106050 107050 108050 109050 110050 111050 112050 113050 114050 115050 116050 117050 118050 119050 120050 121050 122050 123050 124050 125050 126050 127050 128050 129050 130050 131050 132050 133050 134050 135050 136050 137050 138050 139050 140050 141050 142050 143050 144050 145050 146050 147050 148050 149050 150050 151050 152050 153050 154050 155050 156050 157050 158050 159050 160050 161050 162050 163050 164050 165050 166050 167050 168050 169050 170050 171050 172050 173050 174050 175050 176050 177050 178050 179050 180050 181050 182050 183050 184050 185050 186050 187050 188050 189050 190050 191050 192050 193050 194050 195050 196050 197050 198050 199050 200050)) :ldur (quotelvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7100) (7600) (7100) (7500) (7500) (7200) (7600) (7500) (7400) (7500) (7100) (7500) (7200) (7400) (7100) (7200) (7500) (7600) (7400) (7400) (7300) (7200) (7500) (7700) (7700) (7100) (7700) (7600) (7700) (7200) (7700) (7200) (7700) (7300) (7100) (7700) (7600) (7500) (7300) (7300) (7200) (7100) (7700) (7700) (7300) (7300) (7200) (7100) (7600) (7100) (7500) (7400) (7100) (7700) (7600) (7500) (7700) (7100) (7400) (7400) (7500) (7300) (7500) (7300) (7400) (7100) (7700) (7100) (7500) (7100) (7400) (7100) (7700) (7700) (7300) (7600) (7500) (7700) (7300) (7700) (7600) (7100) (7300) (7200) (7400) (7500) (7200) (7200) (7600) (7500) (7600) (7500) (7300) (7600) (7700) (7100) (7700) (7100) (7500) (7300) (7400) (7100) (7200) (7600) (7100) (7500) (7400) (7700) (7200) (7200) (7500) (7200) (7500) (7100) (7500) (7100) (7400) (7300) (7100) (7600) (7700) (7700) (7400) (7300) (7100) (7300) (7400) (7700) (7500) (7700) (7400) (7200) (7200) (7100) (7700) (7700) (7400) (7200) (7400) (7600) (7400) (7100) (7300) (7500) (7700) (7300) (7700) (7700) (7200) (7600) (7100) (7300) (7400) (7700) (7100) (7400) (7100) (7300) (7600) (7300) (7400) (7400) (7400) (7500) (7600) (7700) (7100) (7100) (7400) (7400) (7700) (7200) (7100) (7400) (7200) (7300) (7100) (7500) (7500) (7700) (7600) (7700) (7600) (7200) (7500) (7500) (7300) (7100) (7100) (7100) (7700) (7700) (7100) (7500) (7700) (7400) (7500) (7100) (7600) (7500) (7700) (7300) (7300) (7200) (7200) (7200) (7400) (7100) (7400) (7100) (7700) (7400) (7100) (7200) (7600) (7400))) :lonset (quote (50 1050 2050 3050 4050 5050 6050 7050 8050 9050 10050 11050 12050 13050 14050 15050 16050 17050 18050 19050 20050 21050 22050 23050 24050 25050 26050 27050 28050 29050 30050 31050 32050 33050 34050 35050 36050 37050 38050 39050 40050 41050 42050 43050 44050 45050 46050 47050 48050 49050 50050 51050 52050 53050 54050 55050 56050 57050 58050 59050 60050 61050 62050 63050 64050 65050 66050 67050 68050 69050 70050 71050 72050 73050 74050 75050 76050 77050 78050 79050 80050 81050 82050 83050 84050 85050 86050 87050 88050 89050 90050 91050 92050 93050 94050 95050 96050 97050 98050 99050 100050 101050 102050 103050 104050 105050 106050 107050 108050 109050 110050 111050 112050 113050 114050 115050 116050 117050 118050 119050 120050 121050 122050 123050 124050 125050 126050 127050 128050 129050 130050 131050 132050 133050 134050 135050 136050 137050 138050 139050 140050 141050 142050 143050 144050 145050 146050 147050 148050 149050 150050 151050 152050 153050 154050 155050 156050 157050 158050 159050 160050 161050 162050 163050 164050 165050 166050 167050 168050 169050 170050 171050 172050 173050 174050 175050 176050 177050 178050 179050 180050 181050 182050 183050 184050 185050 186050 187050 188050 189050 190050 191050 192050 193050 194050 195050 196050 197050 198050 199050 200050 201050 202050 203050 204050 205050 206050 207050 208050 209050 210050 211050 212050 213050 214050 215050 216050)) :ldur (quotelvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6600) (6500) (6800) (6600) (6500) (6800) (6600) (6700) (7000) (6600) (6600) (7000) (6800) (7000) (7000) (6600) (6700) (6900) (6500) (7000) (6700) (6700) (6800) (6900) (6800) (6600) (6600) (6800) (6800) (6700) (6900) (6900) (6700) (6800) (7000) (6700) (6900) (6900) (6600) (6600) (6800) (6600) (6900) (6600) (6500) (6700) (6700) (6800) (7000) (6800) (6600) (6700) (6900) (6700) (6700) (7000) (6600) (6500) (6600) (6800) (6800) (6900) (6600) (6900) (6900) (6600) (6700) (6900) (6900) (6700) (6500) (6700) (6700) (6600) (6500) (6800) (7000) (6600) (6900) (6500) (7000) (6500) (6900) (6500) (6800) (6900) (6700) (6900) (6800) (6900) (6900) (6600) (6700) (6500) (6900) (6600) (7000) (6800) (6500) (6700) (7000) (6600) (6700) (6700) (6500) (7000) (6900) (6500) (6500) (6900) (6600) (7000) (6500) (6700) (6600) (6800) (6700) (6800) (6700) (7000) (6900) (6500) (6700) (6600) (6600) (6800) (6900) (6500) (6600) (6600) (6600) (6700) (6500) (6800) (6500) (6600) (6900) (6500) (6700) (6800) (7000) (6600) (7000) (6800) (6600) (7000) (6600) (7000) (6800) (6500) (6500) (6700) (6500) (6700) (7000) (6900) (6700) (6500) (6900) (6800) (6500) (7000) (6900) (6900) (6700) (6800) (6800) (6500) (7000) (6500) (6500) (6900) (6800) (6900) (6500) (6500) (6900) (6600) (6800) (6500) (7000) (6600) (6900) (6700) (6900) (7000) (7000) (7000) (6500) (6900) (6600) (6700) (7000) (6700) (7000) (6500) (7000) (6600) (6900) (6800) (6600) (6900) (6900) (6600) (6500) (6600) (6800) (6800))) :lonset (quote (50 1050 2050 3050 4050 5050 6050 7050 8050 9050 10050 11050 12050 13050 14050 15050 16050 17050 18050 19050 20050 21050 22050 23050 24050 25050 26050 27050 28050 29050 30050 31050 32050 33050 34050 35050 36050 37050 38050 39050 40050 41050 42050 43050 44050 45050 46050 47050 48050 49050 50050 51050 52050 53050 54050 55050 56050 57050 58050 59050 60050 61050 62050 63050 64050 65050 66050 67050 68050 69050 70050 71050 72050 73050 74050 75050 76050 77050 78050 79050 80050 81050 82050 83050 84050 85050 86050 87050 88050 89050 90050 91050 92050 93050 94050 95050 96050 97050 98050 99050 100050 101050 102050 103050 104050 105050 106050 107050 108050 109050 110050 111050 112050 113050 114050 115050 116050 117050 118050 119050 120050 121050 122050 123050 124050 125050 126050 127050 128050 129050 130050 131050 132050 133050 134050 135050 136050 137050 138050 139050 140050 141050 142050 143050 144050 145050 146050 147050 148050 149050 150050 151050 152050 153050 154050 155050 156050 157050 158050 159050 160050 161050 162050 163050 164050 165050 166050 167050 168050 169050 170050 171050 172050 173050 174050 175050 176050 177050 178050 179050 180050 181050 182050 183050 184050 185050 186050 187050 188050 189050 190050 191050 192050 193050 194050 195050 196050 197050 198050 199050 200050 201050 202050 203050 204050 205050 206050 207050 208050)) :ldur (quotelvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6200) (6000) (6000) (6400) (6300) (6200) (6100) (6000) (6100) (6100) (6200) (6100) (6200) (6200) (6100) (6300) (6100) (6400) (6400) (6300) (6000) (6300) (6300) (6000) (6100) (6000) (6000) (6000) (6300) (6200) (6100) (6200) (6000) (6300) (6300) (6100) (6000) (6400) (6200) (6200) (6400) (6400) (6400) (6400) (6000) (6400) (6200) (6200) (6100) (6300) (6000) (6000) (6300) (6100) (6000) (6400) (6100) (6200) (6300) (6200) (6300) (6200) (6300) (6400) (6100) (6400) (6300) (6100) (6400) (6100) (6400) (6000) (6300) (6400) (6300) (6200) (6100) (6200) (6100) (6000) (6300) (6100) (6000) (6000) (6300) (6300) (6000) (6300) (6400) (6400) (6000) (6000) (6300) (6100) (6000) (6400) (6100) (6400) (6000) (6300) (6000) (6100) (6200) (6300) (6000) (6300) (6000) (6200) (6000) (6000) (6400) (6300) (6400) (6200) (6100) (6300) (6100) (6000) (6100) (6400) (6300) (6100) (6100) (6000) (6200) (6400) (6200) (6000) (6400) (6300) (6200) (6300) (6200) (6200) (6200) (6100) (6000) (6200) (6000) (6300) (6000) (6000) (6300) (6000) (6200) (6200) (6100) (6200) (6400) (6100) (6100) (6000) (6100) (6300) (6100) (6200) (6200) (6200) (6300) (6100) (6100) (6300) (6000) (6100) (6200) (6100) (6000) (6300) (6400) (6100) (6400) (6000) (6000) (6300) (6000) (6100))) :lonset (quote (50 1050 2050 3050 4050 5050 6050 7050 8050 9050 10050 11050 12050 13050 14050 15050 16050 17050 18050 19050 20050 21050 22050 23050 24050 25050 26050 27050 28050 29050 30050 31050 32050 33050 34050 35050 36050 37050 38050 39050 40050 41050 42050 43050 44050 45050 46050 47050 48050 49050 50050 51050 52050 53050 54050 55050 56050 57050 58050 59050 60050 61050 62050 63050 64050 65050 66050 67050 68050 69050 70050 71050 72050 73050 74050 75050 76050 77050 78050 79050 80050 81050 82050 83050 84050 85050 86050 87050 88050 89050 90050 91050 92050 93050 94050 95050 96050 97050 98050 99050 100050 101050 102050 103050 104050 105050 106050 107050 108050 109050 110050 111050 112050 113050 114050 115050 116050 117050 118050 119050 120050 121050 122050 123050 124050 125050 126050 127050 128050 129050 130050 131050 132050 133050 134050 135050 136050 137050 138050 139050 140050 141050 142050 143050 144050 145050 146050 147050 148050 149050 150050 151050 152050 153050 154050 155050 156050 157050 158050 159050 160050 161050 162050 163050 164050 165050 166050 167050 168050 169050 170050 171050 172050 173050 174050 175050 176050)) :ldur (quotelvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.1301 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 0 0) (om-make-point 1600 586) 0 1000 nil 7/25 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g) (quote g) (quote g) (quote g)) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 115 286) (om-make-point 26 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 134 112) (om-make-point 202 90) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6400) (8300) (6400) (7400) (6600) (6400) (7400) (7100) (6900) (7000) (8400) (7100) (6800) (7300) (7500) (7800) (7000) (7800) (7200) (6100) (7700) (8300) (7000) (8400) (7700) (8200) (7700) (6500) (7700) (7600) (8200) (6700) (7700) (7100) (8300) (8100) (6400) (6400) (6000) (8000) (7500) (6600) (7100) (7000) (6100) (6600) (7000) (7600) (7000) (6700) (6100) (7400) (6800) (7000) (7000) (7500) (7500) (7200) (6200) (6800) (7700) (7000) (6400) (8400) (6400) (8100) (7800) (7400) (8100) (6200) (6100) (6200) (7800) (6200) (6500) (6600) (8000) (6800) (6600) (7100) (6300) (6600) (8400) (6800) (6700) (7000) (7600) (7500) (7900) (7300) (7800) (8400) (6200) (8000) (7600) (8400) (7200) (7400) (6600) (6000) (7700) (8200) (8000) (7000) (6700) (7300) (7600) (7600) (7900) (6500) (6400) (6500) (7400) (6000) (7600) (7200) (8300) (7500) (6300) (6800) (6700) (7900) (8000) (7900) (8200) (8200) (6300) (6800) (7800) (8100) (7100) (6200) (7100) (7400) (6800) (7900) (8400) (8400) (7800) (6700) (6500) (7700) (6200) (7900) (7200) (7900) (8000) (7700) (7200) (6100) (7900) (6600) (6100) (7000) (7800) (6800) (6900) (7700) (6000) (7100) (7400) (6900) (6100) (6900) (8000) (6600) (6800) (7100) (7000) (6600) (7400) (6200) (6300) (6200) (7300) (8000) (6500) (7200) (6500) (6600) (7900) (6700) (6300) (6900) (7900) (6200) (8000) (6900) (7400) (6200) (7000) (6800) (8300) (8100) (6600) (7900) (6400) (6600) (6600) (8300) (6600) (8100) (7800) (7900) (6100) (6900) (7000) (6300) (8000) (6200) (7800) (6500) (6100) (8000) (8200) (6600) (8200) (7500) (7400) (6900) (7300) (7700) (6800) (7200) (7000) (7900) (8200) (6300) (8100) (6500) (6800) (6600) (6600) (8300) (8400) (6800) (8300) (6500) (6000) (8300) (6900) (8200) (8300) (7500) (6100) (7500) (7000) (6600) (8400) (7500) (6600) (6200) (7100) (6500) (7200) (6200) (7500) (7800) (6900) (6700) (7500) (6200) (7800) (7000) (7500) (6200) (7500) (8100) (7100) (7600) (6200) (7400) (6300) (7500) (7500) (6200) (7300) (8300) (7100) (6900) (7400) (7200) (6200) (7900) (6900) (8400) (7600) (7200) (6100) (8300) (7900) (7600) (7500) (6000) (8200) (6000) (7200) (6400) (6300) (6200) (6700) (7600) (6800) (6300) (7800) (6400) (6500) (7400) (7000) (7700) (6200) (7800) (6700) (6000) (6600) (7600) (7700) (6700) (7400) (7400) (7900) (8300) (7300) (8200) (7800) (8100) (6600) (6700) (7800) (6600) (6100) (6800) (6300) (7100) (6600) (7900) (6200) (6000) (6000) (7600) (8300) (6100) (7500) (7700) (7600) (6300) (7200) (7700) (7700) (6500) (7900) (8100) (6900) (6300) (7500) (7800) (7800) (6900) (7100) (6500) (6400) (7400) (6000) (7400) (6300) (6700) (8300) (7600) (6800) (6200) (6900) (8400) (7900) (6700) (7500) (6600) (7500) (7200) (7100) (7300) (7400) (7700) (8200) (6900) (7400) (6800) (7600) (7300) (7300) (7700) (7700) (6700) (6200) (8400) (8100) (7900) (8200) (6600) (8200) (7800) (8300) (6200) (6500) (7900) (7100) (7800) (7700) (7700) (8200) (6900) (6500) (8100) (6200) (8100) (7100) (7500) (8400) (7000) (8100) (6300) (6400) (7200) (6100) (6000) (7100) (6300) (7200) (7700) (6700) (8300) (6600) (6800) (7900) (7700) (6900) (7800) (7700) (8000) (6300) (6600) (6000) (6800) (7500) (8000) (6300) (6800) (6100) (6900) (8400) (6500) (7400) (7200) (8000) (8400) (6500) (8100) (8100) (6200) (6300) (7000) (7100) (8000) (6200) (6900) (7200) (7000) (8100) (8300) (7800) (7500) (6800) (6800) (6000) (7600) (7600) (6700) (8400) (6400) (6600) (8400) (7400) (8000) (7600) (6900) (6100) (7000) (6200) (6400) (7900) (7400) (7500) (7200) (7800) (7300) (6700) (6800) (6600) (7000) (6900) (6700) (6500) (7500) (8200) (7800) (6800) (6300) (6400) (8400) (7400) (8300) (6000) (8100) (7700) (6000) (8300) (7200) (7500) (7600) (8000) (7500) (6500) (6700) (8400) (7900) (8200) (6400) (7800) (8400) (7800) (7000) (8300) (7800) (6400) (8300) (6900) (7200) (7600) (6600) (7200) (8400) (7800) (8300) (6900) (7800) (8200) (7100) (7200) (7000) (7100) (6000) (6400) (6200) (7900) (6400) (8300) (7800) (8000) (6200) (8000) (7800) (7000) (7100) (7300) (7500) (8300) (6500) (7000) (8100) (6800) (8300) (8400) (6100) (8000) (7900) (6700) (6000) (6200) (7600) (7500) (8400) (7900) (7800) (7100) (7900) (6800) (6600) (7800) (8100) (7400) (8100) (7200) (7400) (7000) (8200) (7800) (7800) (6300) (6000) (8200) (7200) (6200) (8400) (7000) (7900) (8200) (7300) (7200) (7100) (6300) (7100) (7500) (7500) (7500) (6400) (8300) (8000) (6900) (6800) (7500) (6700) (6900) (7800) (8000) (6000) (8300) (7000) (7300) (7500) (8000) (7200) (7300) (7800) (6000) (7400) (6900) (6800) (7500) (7600) (6300) (7400) (6000) (7000) (8000) (6400) (6400) (6800) (7000) (7900) (6300) (6600) (7700) (7900) (6800) (6000) (8000) (8400) (8300) (6300) (6400) (6300) (6200) (7300) (7700) (7000) (6000) (6900) (7900) (6800) (6500) (6400) (6300) (7100) (8000) (8400) (6300) (6100) (7900) (8000) (8100) (6800) (7500) (7900) (8200) (7300) (6100) (7000) (7000) (7300) (7800) (6100) (8300) (8100) (6700) (7700) (7000) (6500) (7800) (6700) (6500) (6200) (6400) (7500) (7000) (8000) (7100) (7600) (8100) (6100) (6400) (6800) (7100) (8000) (6500) (6000) (8300) (8000) (6800) (8000) (6400) (6200) (6000) (7200) (6700) (6800) (7800) (8000) (7500) (6900) (7800) (8200) (7900) (8400) (6400) (7800) (7000) (8300) (8100) (7100) (8000) (7700) (6400) (7700) (7900) (6100) (6900) (6200) (7400) (7000) (6500) (7900) (6100) (8400) (6100) (8100) (6200) (7900) (6300) (6500) (6800) (7100) (6700) (8000) (8100) (7200) (6200) (7300) (6600) (6900) (6000) (6800) (7700) (6000) (8300) (6300) (8400) (7200) (6200) (7000) (7100) (8300) (7900) (7700) (6400) (6300) (7400) (7900) (7600) (7900) (8200) (6400) (6500) (7000) (6300) (6900) (6400) (7500) (8100) (8400) (8100) (6400))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700 2800 2900 3000 3100 3200 3300 3400 3500 3600 3700 3800 3900 4000 4100 4200 4300 4400 4500 4600 4700 4800 4900 5000 5100 5200 5300 5400 5500 5600 5700 5800 5900 6000 6100 6200 6300 6400 6500 6600 6700 6800 6900 7000 7100 7200 7300 7400 7500 7600 7700 7800 7900 8000 8100 8200 8300 8400 8500 8600 8700 8800 8900 9000 9100 9200 9300 9400 9500 9600 9700 9800 9900 10000 10100 10200 10300 10400 10500 10600 10700 10800 10900 11000 11100 11200 11300 11400 11500 11600 11700 11800 11900 12000 12100 12200 12300 12400 12500 12600 12700 12800 12900 13000 13100 13200 13300 13400 13500 13600 13700 13800 13900 14000 14100 14200 14300 14400 14500 14600 14700 14800 14900 15000 15100 15200 15300 15400 15500 15600 15700 15800 15900 16000 16100 16200 16300 16400 16500 16600 16700 16800 16900 17000 17100 17200 17300 17400 17500 17600 17700 17800 17900 18000 18100 18200 18300 18400 18500 18600 18700 18800 18900 19000 19100 19200 19300 19400 19500 19600 19700 19800 19900 20000 20100 20200 20300 20400 20500 20600 20700 20800 20900 21000 21100 21200 21300 21400 21500 21600 21700 21800 21900 22000 22100 22200 22300 22400 22500 22600 22700 22800 22900 23000 23100 23200 23300 23400 23500 23600 23700 23800 23900 24000 24100 24200 24300 24400 24500 24600 24700 24800 24900 25000 25100 25200 25300 25400 25500 25600 25700 25800 25900 26000 26100 26200 26300 26400 26500 26600 26700 26800 26900 27000 27100 27200 27300 27400 27500 27600 27700 27800 27900 28000 28100 28200 28300 28400 28500 28600 28700 28800 28900 29000 29100 29200 29300 29400 29500 29600 29700 29800 29900 30000 30100 30200 30300 30400 30500 30600 30700 30800 30900 31000 31100 31200 31300 31400 31500 31600 31700 31800 31900 32000 32100 32200 32300 32400 32500 32600 32700 32800 32900 33000 33100 33200 33300 33400 33500 33600 33700 33800 33900 34000 34100 34200 34300 34400 34500 34600 34700 34800 34900 35000 35100 35200 35300 35400 35500 35600 35700 35800 35900 36000 36100 36200 36300 36400 36500 36600 36700 36800 36900 37000 37100 37200 37300 37400 37500 37600 37700 37800 37900 38000 38100 38200 38300 38400 38500 38600 38700 38800 38900 39000 39100 39200 39300 39400 39500 39600 39700 39800 39900 40000 40100 40200 40300 40400 40500 40600 40700 40800 40900 41000 41100 41200 41300 41400 41500 41600 41700 41800 41900 42000 42100 42200 42300 42400 42500 42600 42700 42800 42900 43000 43100 43200 43300 43400 43500 43600 43700 43800 43900 44000 44100 44200 44300 44400 44500 44600 44700 44800 44900 45000 45100 45200 45300 45400 45500 45600 45700 45800 45900 46000 46100 46200 46300 46400 46500 46600 46700 46800 46900 47000 47100 47200 47300 47400 47500 47600 47700 47800 47900 48000 48100 48200 48300 48400 48500 48600 48700 48800 48900 49000 49100 49200 49300 49400 49500 49600 49700 49800 49900 50000 50100 50200 50300 50400 50500 50600 50700 50800 50900 51000 51100 51200 51300 51400 51500 51600 51700 51800 51900 52000 52100 52200 52300 52400 52500 52600 52700 52800 52900 53000 53100 53200 53300 53400 53500 53600 53700 53800 53900 54000 54100 54200 54300 54400 54500 54600 54700 54800 54900 55000 55100 55200 55300 55400 55500 55600 55700 55800 55900 56000 56100 56200 56300 56400 56500 56600 56700 56800 56900 57000 57100 57200 57300 57400 57500 57600 57700 57800 57900 58000 58100 58200 58300 58400 58500 58600 58700 58800 58900 59000 59100 59200 59300 59400 59500 59600 59700 59800 59900 60000 60100 60200 60300 60400 60500 60600 60700 60800 60900 61000 61100 61200 61300 61400 61500 61600 61700 61800 61900 62000 62100 62200 62300 62400 62500 62600 62700 62800 62900 63000 63100 63200 63300 63400 63500 63600 63700 63800 63900 64000 64100 64200 64300 64400 64500 64600 64700 64800 64900 65000 65100 65200 65300 65400 65500 65600 65700 65800 65900 66000 66100 66200 66300 66400 66500 66600 66700 66800 66900 67000 67100 67200 67300 67400 67500 67600 67700 67800 67900 68000 68100 68200 68300 68400 68500 68600 68700 68800 68900 69000 69100 69200 69300 69400 69500 69600 69700 69800 69900 70000 70100 70200 70300 70400 70500 70600 70700 70800 70900 71000 71100 71200 71300 71400 71500 71600 71700 71800 71900 72000 72100 72200 72300 72400 72500 72600 72700 72800 72900 73000 73100 73200 73300 73400 73500 73600 73700 73800 73900 74000 74100 74200 74300 74400 74500 74600 74700 74800 74900 75000 75100 75200 75300 75400 75500 75600 75700 75800 75900 76000 76100 76200 76300 76400 76500 76600 76700 76800 76900 77000 77100 77200 77300 77400 77500 77600 77700 77800 77900 78000 78100 78200 78300 78400 78500 78600 78700 78800 78900 79000 79100 79200 79300 79400 79500 79600 79700 79800 79900 80019)) :ldur (quote ((488) (135) (186) (347) (270) (90) (476) (253) (133) (316) (16) (449) (182) (83) (376) (31) (170) (366) (12) (389) (284) (35) (496) (299) (350) (103) (83) (359) (333) (89) (108) (410) (367) (424) (124) (158) (344) (189) (404) (374) (479) (56) (351) (192) (277) (296) (60) (326) (217) (254) (260) (491) (320) (70) (397) (492) (109) (461) (488) (424) (234) (226) (497) (294) (132) (369) (434) (350) (171) (81) (65) (82) (256) (148) (344) (345) (65) (195) (411) (272) (113) (346) (326) (383) (324) (476) (160) (125) (62) (161) (263) (350) (54) (429) (130) (372) (68) (105) (191) (351) (315) (236) (479) (357) (105) (316) (202) (384) (442) (221) (294) (22) (148) (256) (153) (270) (495) (484) (494) (497) (38) (110) (21) (456) (291) (130) (182) (313) (229) (116) (18) (206) (131) (65) (195) (484) (81) (35) (163) (49) (213) (118) (58) (259) (433) (431) (500) (289) (250) (53) (371) (324) (367) (429) (20) (427) (113) (51) (158) (457) (297) (46) (481) (424) (402) (140) (397) (188) (83) (339) (283) (303) (46) (437) (422) (467) (440) (45) (217) (303) (293) (461) (185) (473) (124) (186) (124) (36) (325) (450) (329) (178) (492) (322) (15) (224) (485) (180) (469) (440) (114) (496) (122) (336) (401) (499) (339) (52) (266) (50) (209) (436) (177) (285) (465) (107) (372) (429) (195) (124) (146) (156) (92) (443) (348) (415) (442) (337) (420) (375) (61) (301) (327) (11) (228) (137) (39) (437) (221) (57) (122) (291) (439) (95) (54) (260) (13) (239) (420) (165) (321) (169) (343) (491) (405) (392) (193) (63) (107) (37) (345) (333) (383) (162) (490) (444) (332) (329) (224) (110) (110) (418) (420) (14) (305) (68) (82) (417) (239) (107) (74) (13) (26) (289) (384) (183) (479) (70) (241) (459) (428) (230) (391) (227) (39) (210) (22) (460) (112) (402) (420) (47) (96) (229) (324) (185) (131) (374) (157) (370) (323) (294) (135) (455) (144) (223) (109) (261) (269) (456) (291) (10) (125) (99) (217) (13) (218) (398) (59) (259) (25) (73) (178) (420) (358) (138) (50) (423) (106) (352) (239) (399) (196) (319) (428) (415) (480) (13) (42) (488) (410) (18) (361) (417) (62) (285) (15) (156) (31) (295) (53) (49) (499) (178) (221) (59) (444) (452) (58) (272) (112) (293) (256) (435) (299) (431) (111) (151) (492) (88) (434) (419) (344) (372) (64) (141) (416) (210) (477) (151) (71) (471) (438) (33) (101) (224) (200) (187) (358) (25) (130) (495) (190) (421) (398) (422) (232) (50) (193) (200) (285) (202) (172) (356) (93) (477) (101) (339) (14) (249) (130) (379) (143) (462) (176) (473) (246) (332) (290) (232) (151) (334) (191) (363) (135) (160) (269) (455) (110) (232) (254) (214) (295) (341) (440) (183) (399) (199) (143) (460) (31) (467) (89) (236) (33) (255) (52) (125) (57) (260) (256) (150) (415) (444) (489) (66) (12) (295) (336) (375) (290) (472) (464) (340) (166) (458) (439) (485) (421) (94) (361) (379) (49) (478) (291) (318) (204) (421) (261) (232) (133) (360) (54) (91) (295) (247) (134) (497) (397) (121) (383) (189) (297) (320) (400) (15) (136) (96) (341) (28) (42) (376) (279) (383) (115) (194) (75) (308) (305) (260) (78) (261) (26) (327) (48) (268) (353) (239) (241) (93) (34) (395) (18) (196) (236) (157) (492) (162) (54) (383) (81) (225) (20) (300) (454) (376) (441) (199) (132) (99) (433) (237) (59) (215) (347) (197) (483) (125) (126) (76) (288) (210) (293) (99) (327) (386) (78) (336) (481) (134) (264) (430) (394) (192) (375) (380) (231) (173) (305) (250) (468) (425) (307) (441) (234) (187) (107) (22) (191) (295) (397) (212) (248) (146) (10) (188) (272) (174) (403) (106) (183) (73) (372) (136) (427) (113) (69) (18) (33) (364) (495) (306) (481) (463) (490) (448) (499) (99) (14) (157) (312) (238) (156) (307) (327) (371) (29) (118) (478) (439) (239) (266) (238) (314) (343) (475) (269) (430) (251) (185) (266) (96) (338) (176) (204) (358) (124) (42) (371) (207) (450) (151) (411) (405) (439) (301) (255) (469) (401) (372) (68) (259) (278) (129) (90) (213) (156) (166) (417) (141) (40) (39) (281) (106) (32) (148) (130) (315) (127) (125) (488) (88) (349) (76) (67) (113) (357) (464) (55) (130) (425) (416) (382) (285) (295) (367) (13) (198) (342) (57) (499) (159) (65) (264) (37) (69) (477) (462) (121) (157) (218) (23) (30) (366) (474) (210) (132) (484) (26) (216) (344) (77) (464) (139) (259) (164) (114) (133) (91) (194) (161) (496) (274) (403) (80) (178) (284) (49) (267) (305) (340) (480) (331) (43) (492) (379) (90) (113) (28) (471) (206) (349) (105) (208) (494) (493) (37) (404) (205) (413) (25) (298) (416) (487) (267) (344) (133) (357) (422) (360) (235) (11) (66) (482) (192) (172) (171) (202) (321) (261) (17) (398) (73) (209) (28) (481) (330) (169) (484) (301) (210) (461) (196) (109) (341) (45) (312) (295) (163) (119))) :lvel (quote ((62) (49) (103) (15) (26) (119) (124) (90) (72) (30) (111) (47) (47) (68) (17) (76) (79) (16) (45) (62) (10) (80) (107) (51) (33) (122) (99) (96) (11) (100) (36) (56) (50) (13) (96) (98) (85) (111) (26) (106) (24) (84) (45) (115) (75) (80) (50) (83) (17) (39) (24) (102) (24) (27) (108) (89) (106) (59) (114) (34) (65) (106) (50) (44) (25) (40) (34) (91) (87) (116) (110) (99) (32) (76) (60) (94) (124) (107) (112) (58) (106) (82) (35) (37) (90) (54) (42) (104) (126) (80) (48) (28) (90) (88) (113) (64) (111) (47) (41) (34) (29) (67) (23) (17) (96) (127) (127) (65) (34) (121) (40) (57) (66) (30) (41) (26) (86) (105) (37) (99) (29) (122) (69) (17) (125) (70) (115) (44) (59) (93) (61) (13) (105) (46) (35) (20) (55) (68) (106) (12) (19) (13) (97) (57) (118) (45) (97) (85) (55) (51) (103) (54) (82) (85) (108) (120) (17) (118) (64) (12) (67) (43) (112) (88) (119) (102) (113) (20) (76) (71) (119) (108) (36) (74) (31) (34) (102) (115) (117) (77) (105) (56) (61) (108) (52) (73) (65) (37) (85) (81) (23) (16) (125) (79) (75) (115) (119) (78) (24) (19) (42) (32) (80) (104) (107) (63) (20) (85) (53) (15) (120) (75) (17) (25) (31) (116) (63) (35) (106) (51) (21) (110) (85) (103) (23) (18) (12) (53) (42) (44) (59) (116) (80) (69) (10) (21) (34) (87) (40) (84) (48) (91) (126) (92) (123) (49) (58) (50) (83) (117) (120) (110) (16) (26) (106) (102) (21) (62) (118) (87) (97) (73) (127) (11) (83) (31) (57) (20) (70) (46) (103) (66) (53) (43) (79) (74) (101) (39) (73) (29) (22) (119) (77) (89) (122) (73) (81) (100) (107) (68) (44) (105) (76) (17) (62) (16) (41) (43) (69) (22) (87) (113) (60) (11) (111) (17) (95) (96) (127) (13) (111) (41) (16) (79) (74) (21) (92) (63) (47) (20) (48) (37) (40) (123) (46) (116) (12) (26) (86) (41) (69) (38) (34) (88) (53) (125) (28) (35) (91) (37) (92) (19) (117) (64) (71) (17) (29) (53) (126) (94) (15) (77) (58) (39) (115) (95) (20) (12) (108) (35) (78) (17) (36) (53) (78) (30) (70) (98) (39) (116) (17) (19) (13) (25) (115) (85) (69) (68) (89) (84) (14) (82) (111) (67) (76) (22) (35) (38) (31) (67) (116) (22) (37) (120) (101) (98) (14) (51) (104) (34) (87) (90) (82) (98) (45) (60) (115) (63) (127) (78) (124) (33) (123) (99) (90) (44) (104) (102) (48) (110) (111) (74) (63) (75) (55) (49) (59) (60) (123) (72) (122) (25) (39) (38) (113) (77) (82) (29) (110) (116) (85) (34) (89) (126) (20) (75) (102) (47) (22) (29) (22) (46) (48) (104) (102) (77) (68) (41) (112) (90) (92) (45) (73) (35) (106) (112) (121) (109) (113) (18) (99) (72) (25) (80) (105) (70) (115) (125) (122) (107) (90) (120) (85) (36) (115) (88) (22) (92) (55) (28) (21) (90) (76) (87) (29) (125) (41) (103) (80) (20) (99) (117) (77) (67) (14) (79) (32) (49) (20) (89) (32) (86) (88) (59) (54) (69) (32) (12) (103) (101) (54) (61) (123) (65) (88) (97) (82) (42) (56) (50) (36) (17) (41) (11) (124) (80) (92) (38) (56) (68) (24) (67) (28) (72) (30) (85) (13) (47) (116) (79) (73) (107) (120) (46) (106) (30) (36) (63) (42) (43) (60) (53) (78) (61) (47) (62) (32) (79) (11) (72) (27) (76) (12) (46) (33) (11) (117) (119) (66) (123) (17) (74) (47) (100) (79) (85) (50) (124) (58) (60) (43) (39) (76) (43) (90) (27) (22) (53) (31) (74) (122) (61) (69) (44) (95) (102) (50) (73) (21) (28) (32) (111) (50) (76) (47) (119) (111) (99) (64) (74) (33) (100) (33) (24) (36) (17) (122) (13) (125) (51) (62) (12) (84) (27) (76) (72) (71) (95) (28) (68) (21) (18) (80) (41) (15) (20) (90) (69) (97) (21) (25) (126) (30) (84) (124) (17) (44) (68) (39) (45) (93) (91) (37) (39) (40) (21) (81) (39) (15) (39) (52) (26) (33) (47) (31) (120) (65) (96) (119) (51) (20) (118) (118) (16) (101) (39) (113) (15) (45) (101) (58) (100) (57) (68) (37) (41) (117) (62) (83) (75) (16) (60) (96) (107) (91) (116) (36) (15) (111) (78) (49) (103) (88) (93) (65) (96) (95) (66) (29) (86) (91) (70) (80) (45) (102) (112) (88) (86) (19) (104) (70) (79) (69) (90) (71) (36) (83) (29) (69) (124) (127) (110) (121) (64) (118) (10) (92) (118) (21) (119) (33) (71) (59) (93) (85) (77) (58) (50) (117) (71) (13) (74) (65) (35) (31) (54) (100) (83) (23) (18) (85) (35) (96) (109) (34) (77) (121) (78) (127) (118) (10) (33) (38) (107) (92) (16) (52) (69) (115) (126) (114) (42) (77) (39) (110) (78) (102) (46) (67) (79))) :loffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 0 0) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((17 0 1 0 nil 0) (2 0 1 1 nil 0) (12 0 3 0 nil 0) (13 0 3 1 nil 0) (1 0 5 0 nil 0) (4 0 5 1 nil 0) (17 1 6 0 nil 0) (16 0 6 1 nil 0) (0 0 7 0 nil 0) (5 0 8 0 nil 0) (8 0 9 0 nil 0) (11 0 12 0 nil 0) (6 0 14 0 nil 0) (14 0 15 1 nil 0) (7 0 17 0 nil 0))) nil 6.1301))