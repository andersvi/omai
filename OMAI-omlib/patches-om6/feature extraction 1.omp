; OM File Header - Saved 2018/11/27 17:15:58
; (6.140003 :patc (om-make-point 10 110) (om-make-point 0 0) (om-make-point 1044 569) "" 183 0 "2018/11/24 15:02:57" "2018/11/27 17:15:56")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "feature extraction 1" (quote ((let ((box (om-load-boxcall (quote lispfun) "FUNCALL" (quote funcall) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 73 367) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 275 56) (quote "for a list of currently implemented$MIR feature extractors, check the$file \"features.lisp\" inside this library") "" (om-make-point 617 41) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 242 28) (quote "collect wanted features of input chord-seq") "" (om-make-point 192 437) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOST-COMMON-PITCH-FRACTION" (quote omai::most-common-pitch-fraction) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 397 92) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "IMPORTANCE-OF-HIGH-REGISTER" (quote omai::importance-of-high-register) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 818 178) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "IMPORTANCE-OF-MIDDLE-REGISTER" (quote omai::importance-of-middle-register) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 735 145) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "IMPORTANCE-OF-BASS-REGISTER" (quote omai::importance-of-bass-register) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 691 196) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 145 444) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote b)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote c)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote d)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote e)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 326 381) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REPEATED-NOTES" (quote omai::repeated-notes) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 634 154) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "AMOUNT-OF-ARPEGGIATION" (quote omai::amount-of-arpeggiation) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 567 107) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MELODIC-MINOR-MAJOR-THIRD-RATIO" (quote omai::melodic-minor-major-third-ratio) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 474 204) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MELODIC-LARGE-INTERVALS" (quote omai::melodic-large-intervals) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 450 153) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 50 121) (om-make-point 334 105) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (8300) (7400) (6400) (7400) (7400) (7100) (7700) (8400) (6900) (7000) (7500) (6800) (7900) (6200) (8000) (7400) (7900) (6400) (6700) (6400) (8200) (6000) (7000) (6000) (6000) (6400) (7100) (7100) (7400) (6700) (7600) (7000) (7700) (6100) (6900) (6900) (6000) (7300) (8000) (6400) (7900) (7100) (6200) (6400) (6300) (8300) (7700) (6200) (6400) (7600) (7400) (7700) (8300) (6200) (6800) (6600) (6400) (8300) (8300) (7100) (6400) (7800) (7200) (6300) (6000) (7000) (8200) (6500) (7700) (6600) (8100) (6700) (8300) (7700) (7400) (8200) (7100) (6700) (6500) (6800) (6800) (6800) (8400) (7000) (6900) (8200) (8000) (6000) (7800) (6600) (6400) (6400) (6000) (8400) (6000) (6800) (7900) (7800) (8400))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700 2800 2900 3000 3100 3200 3300 3400 3500 3600 3700 3800 3900 4000 4100 4200 4300 4400 4500 4600 4700 4800 4900 5000 5100 5200 5300 5400 5500 5600 5700 5800 5900 6000 6100 6200 6300 6400 6500 6600 6700 6800 6900 7000 7100 7200 7300 7400 7500 7600 7700 7800 7900 8000 8100 8200 8300 8400 8500 8600 8700 8800 8900 9000 9100 9200 9300 9400 9500 9600 9700 9800 9900 10200)) :ldur (quote ((211) (79) (419) (41) (247) (214) (338) (315) (181) (148) (206) (327) (248) (368) (391) (189) (26) (338) (481) (445) (84) (235) (174) (321) (342) (65) (261) (197) (205) (436) (25) (127) (284) (457) (276) (53) (231) (113) (382) (335) (19) (308) (474) (170) (253) (447) (407) (233) (405) (408) (476) (63) (202) (120) (398) (423) (375) (307) (360) (435) (20) (196) (15) (157) (13) (300) (478) (120) (407) (95) (319) (242) (388) (420) (137) (427) (284) (288) (264) (430) (137) (126) (209) (446) (281) (202) (10) (460) (145) (30) (341) (19) (46) (153) (321) (195) (463) (367) (179) (300))) :lvel (quote ((34) (62) (61) (115) (83) (71) (18) (124) (94) (102) (13) (61) (127) (53) (123) (86) (63) (73) (126) (71) (61) (108) (96) (22) (108) (67) (58) (111) (74) (18) (123) (76) (19) (124) (114) (124) (58) (114) (32) (110) (98) (47) (93) (30) (68) (21) (61) (51) (90) (60) (49) (23) (92) (77) (100) (29) (57) (101) (79) (119) (80) (28) (34) (72) (50) (102) (105) (69) (16) (95) (104) (111) (16) (68) (74) (72) (45) (70) (127) (114) (107) (20) (23) (88) (99) (100) (81) (46) (88) (59) (75) (120) (117) (86) (81) (53) (33) (52) (88) (56))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "&" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "TESTCS2" (quote testcs2) (quote nil) (om-make-point 45 45) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((13 0 0 1 nil 0) (0 0 7 0 nil 0) (8 0 7 1 nil 0) (3 0 8 0 nil 0) (12 0 8 1 nil 0) (11 0 8 2 nil 0) (10 0 8 3 nil 0) (9 0 8 4 nil 0) (6 0 8 5 nil 0) (5 0 8 6 nil 0) (4 0 8 7 nil 0) (14 0 13 0 nil 0))) nil 6.140003))
